inc <- 0.5
mu_0 <- cumsum(c(0.4,rep(inc, (n_treat - 1))))
mu_0 <- 0.4
nu_0 <- 1.05
alpha_0 <- 5.1
beta_0 <- 12.73
n_per <- 50
p_best_fut <- 0.057
p_best_sup <- 0.975
SUCRA_fut <- 0.477
SUCRA_sup <- 0.975
T1 <- TRUE
# T1 <- FALSE
registerDoParallel(cl <- makeCluster(4))
results <- foreach(k = 1:n_sim, .combine = rbind, .packages = c("Rcpp")) %dopar% {
set.seed(123 + k)
p_best_res <- rep("Not", n_treat)
SUCRA_res <- rep("Not", n_treat)
tau <- rgamma(1, shape = alpha_0, rate = beta_0)
if(T1){
mu_sim <- rep(rnorm(1, mean = mu_0, sqrt(1 / (tau * nu_0))), n_treat)
best = NA}
if(!T1){
mu_sim <- rnorm(n_treat, mu_0, sqrt(1 / (tau * nu_0)))
best = which.min(mu_sim)}
data_mat <- matrix(NA, nrow = n_per, ncol = n_treat)
for(i in 1:n_treat){
data_mat[, i] <- data_sim(n_per, mu_sim[i], tau)
}
posts <- posterior_update(data_mat, rep(mu_0[1], n_treat),
nu_0, alpha_0, beta_0, n_post)
calculation <- SUCRA_calc(posts, n_treat)
p_best <- calculation$p_best
SUCRA <- calculation$SUCRA
rec_p_best <- p_best > p_best_fut
rec_SUCRA <- SUCRA > SUCRA_fut
p_best_res[!rec_p_best] <- "Inf"
SUCRA_res[!rec_SUCRA] <- "Inf"
# P_best
if(sum(rec_p_best) == 1){
p_best_res[rec_p_best] <- "Sup"
}
if(sum(rec_p_best) > 1){
data_mat_init_p_best <- data_mat[, rec_p_best]
data_mat_add_p_best <- matrix(NA, nrow = n_per, ncol = sum(rec_p_best))
for(i in 1:sum(rec_p_best)){
data_mat_add_p_best[, i] <- data_sim(n_per, mu_sim[rec_p_best][i], tau)
}
data_mat_p_best <- rbind(data_mat_init_p_best, data_mat_add_p_best)
posts <- posterior_update(data_mat_p_best, rep(mu_0[1], sum(rec_p_best)),
nu_0, alpha_0, beta_0, n_post)
maxi <- apply(posts, 1, which.min)
p_best_res[rec_p_best][(table(maxi) / n_post) > p_best_sup] <- "Sup"
}
if(sum(rec_SUCRA) == 1){
SUCRA_res[rec_SUCRA] <- "Sup"
}
if(sum(rec_SUCRA) > 1){
data_mat_init_SUCRA <- data_mat[, rec_SUCRA]
data_mat_add_SUCRA <- matrix(NA, nrow = n_per, ncol = sum(rec_SUCRA))
for(i in 1:sum(rec_SUCRA)){
data_mat_add_SUCRA[, i] <- data_sim(n_per, mu_sim[rec_SUCRA][i], tau)
}
data_mat_SUCRA <- rbind(data_mat_init_SUCRA, data_mat_add_SUCRA)
posts <- posterior_update(data_mat_SUCRA, rep(mu_0[1], sum(rec_SUCRA)),
nu_0, alpha_0, beta_0, n_post)
calculation1 <- SUCRA_calc(posts, sum(rec_SUCRA))
SUCRA_res[rec_SUCRA][calculation1$SUCRA > SUCRA_sup] <- "Sup"
}
return(c(p_best_res, SUCRA_res, best))
}
stopCluster(cl)
colnames(results) <- c(paste("Pbest, trt", 1:n_treat, sep = ""),
paste("SUCRA, trt", 1:n_treat, sep = ""),
"best")
if(T1){
##PBEST
print(mean(apply(results[, 1:n_treat] == "Sup",1, sum)))
##SUCRA
print(mean(apply(results[, (n_treat + 1):(2 * n_treat)] == "Sup",1, sum)))
}
if(!T1){
##PBEST
print(mean(unlist(apply(results[, 1:n_treat],1,
function(x){max(0,which(x == "Sup"))})) == as.numeric(results[,2 * n_treat + 1])))
##SUCRA
print(mean(unlist(apply(results[, (n_treat + 1):(2 * n_treat)],1,
function(x){max(0,which(x == "Sup"))})) == as.numeric(results[,2 * n_treat + 1])))
}
#ESS PBest
mean(apply((results[, 1:n_treat] %in% c("Not", "Sup")) * 100 +
(results[, 1:n_treat] == "Inf") * 50, 2, mean))
#ESS SUCRA
mean(apply((results[, (n_treat + 1):(2 * n_treat)] %in% c("Not", "Sup")) * 100 +
(results[, (n_treat + 1):(2 * n_treat)] == "Inf") * 50, 2, mean))
posterior_update <- function(X, mu0, nu, alpha, beta, n_sim){
n_treat <- ncol(X)
n_tot <- nrow(X)
x_bar <- apply(X, 2, mean)
var_scale <- (n_tot - 1) * apply(X, 2, var)
mean_diff <- (x_bar - mu0) ^ 2
post_sim <- matrix(NA, nrow = n_sim, ncol = n_treat)
for(i in 1:n_treat){
mu_post <- (nu  * mu0[i] + n_tot * x_bar[i]) / (nu + n_tot)
nu_post <- nu + n_tot
alpha_post <- alpha + n_tot/2
beta_post <- beta + var_scale[i] / 2 +
(n_tot * nu / (2 * (nu + n_tot))) * mean_diff[i]
params <- c(2 * alpha_post,
mu_post,
beta_post / (nu_post * alpha_post))
post_sim[, i] <- rt(n_sim, df = params[1]) * sqrt(params[3]) + params[2]
}
return(post_sim)
}
data_sim <- function(n_tot, mu0, tau){
X <- rnorm(n_tot, mu0, sqrt(1 / tau))
return(X)
}
SUCRA_calc <- function(posts, n_treat){
ranking<-c(1:n_treat)
cppFunction('NumericMatrix rankRows(NumericMatrix post_mu, NumericVector ranking) {
int nsamps = post_mu.nrow();
int n_treats = post_mu.ncol();
NumericMatrix ranks(nsamps, n_treats);
for(int k = 0; k < nsamps; k++) {
NumericVector x = post_mu.row(k);
NumericVector s = clone(x);
std::sort(s.begin(), s.end());
IntegerVector index(n_treats);
NumericVector ranked(n_treats);
for(int i = 0; i < n_treats; i++) {
for(int j = 0; j < n_treats; j++) {
if(x[j] == s[i]) {
index[j] = i+1;
}
}
}
ranks.row(k) = index;
}
return ranks;
}')
ranks <- rankRows(post_mu=posts, ranking=ranking)
p_ranks <- matrix(NA, nrow = n_treat, ncol = n_treat)
for(i in 1:n_treat){
for(j in 1:n_treat){
p_ranks[i, j] <- mean(ranks[, i] == j)
}
}
row.names(p_ranks) <- paste("trt", 1:n_treat, sep = "")
colnames(p_ranks) <- paste("rnk", 1:n_treat, sep = "")
p_best <- p_ranks[, 1]
if(n_treat == 2){
SUCRA <- p_best
}
if(n_treat > 2){
SUCRA <- apply(apply(p_ranks, 1, cumsum)[-n_treat, ], 2, mean)}
return(list(p_best = p_best, SUCRA = SUCRA))
}
library(doParallel)
library(foreach)
library(Rcpp)
n_treat <- 5
n_sim <- 10000
n_post <- 10000
inc <- 0.5
mu_0 <- cumsum(c(0.4,rep(inc, (n_treat - 1))))
mu_0 <- 0.4
nu_0 <- 1.05
alpha_0 <- 5.1
beta_0 <- 12.73
n_per <- 50
p_best_fut <- 0.057
p_best_sup <- 0.975
SUCRA_fut <- 0.472
SUCRA_sup <- 0.975
T1 <- TRUE
# T1 <- FALSE
registerDoParallel(cl <- makeCluster(4))
results <- foreach(k = 1:n_sim, .combine = rbind, .packages = c("Rcpp")) %dopar% {
set.seed(123 + k)
p_best_res <- rep("Not", n_treat)
SUCRA_res <- rep("Not", n_treat)
tau <- rgamma(1, shape = alpha_0, rate = beta_0)
if(T1){
mu_sim <- rep(rnorm(1, mean = mu_0, sqrt(1 / (tau * nu_0))), n_treat)
best = NA}
if(!T1){
mu_sim <- rnorm(n_treat, mu_0, sqrt(1 / (tau * nu_0)))
best = which.min(mu_sim)}
data_mat <- matrix(NA, nrow = n_per, ncol = n_treat)
for(i in 1:n_treat){
data_mat[, i] <- data_sim(n_per, mu_sim[i], tau)
}
posts <- posterior_update(data_mat, rep(mu_0[1], n_treat),
nu_0, alpha_0, beta_0, n_post)
calculation <- SUCRA_calc(posts, n_treat)
p_best <- calculation$p_best
SUCRA <- calculation$SUCRA
rec_p_best <- p_best > p_best_fut
rec_SUCRA <- SUCRA > SUCRA_fut
p_best_res[!rec_p_best] <- "Inf"
SUCRA_res[!rec_SUCRA] <- "Inf"
# P_best
if(sum(rec_p_best) == 1){
p_best_res[rec_p_best] <- "Sup"
}
if(sum(rec_p_best) > 1){
data_mat_init_p_best <- data_mat[, rec_p_best]
data_mat_add_p_best <- matrix(NA, nrow = n_per, ncol = sum(rec_p_best))
for(i in 1:sum(rec_p_best)){
data_mat_add_p_best[, i] <- data_sim(n_per, mu_sim[rec_p_best][i], tau)
}
data_mat_p_best <- rbind(data_mat_init_p_best, data_mat_add_p_best)
posts <- posterior_update(data_mat_p_best, rep(mu_0[1], sum(rec_p_best)),
nu_0, alpha_0, beta_0, n_post)
maxi <- apply(posts, 1, which.min)
p_best_res[rec_p_best][(table(maxi) / n_post) > p_best_sup] <- "Sup"
}
if(sum(rec_SUCRA) == 1){
SUCRA_res[rec_SUCRA] <- "Sup"
}
if(sum(rec_SUCRA) > 1){
data_mat_init_SUCRA <- data_mat[, rec_SUCRA]
data_mat_add_SUCRA <- matrix(NA, nrow = n_per, ncol = sum(rec_SUCRA))
for(i in 1:sum(rec_SUCRA)){
data_mat_add_SUCRA[, i] <- data_sim(n_per, mu_sim[rec_SUCRA][i], tau)
}
data_mat_SUCRA <- rbind(data_mat_init_SUCRA, data_mat_add_SUCRA)
posts <- posterior_update(data_mat_SUCRA, rep(mu_0[1], sum(rec_SUCRA)),
nu_0, alpha_0, beta_0, n_post)
calculation1 <- SUCRA_calc(posts, sum(rec_SUCRA))
SUCRA_res[rec_SUCRA][calculation1$SUCRA > SUCRA_sup] <- "Sup"
}
return(c(p_best_res, SUCRA_res, best))
}
stopCluster(cl)
colnames(results) <- c(paste("Pbest, trt", 1:n_treat, sep = ""),
paste("SUCRA, trt", 1:n_treat, sep = ""),
"best")
if(T1){
##PBEST
print(mean(apply(results[, 1:n_treat] == "Sup",1, sum)))
##SUCRA
print(mean(apply(results[, (n_treat + 1):(2 * n_treat)] == "Sup",1, sum)))
}
if(!T1){
##PBEST
print(mean(unlist(apply(results[, 1:n_treat],1,
function(x){max(0,which(x == "Sup"))})) == as.numeric(results[,2 * n_treat + 1])))
##SUCRA
print(mean(unlist(apply(results[, (n_treat + 1):(2 * n_treat)],1,
function(x){max(0,which(x == "Sup"))})) == as.numeric(results[,2 * n_treat + 1])))
}
#ESS PBest
mean(apply((results[, 1:n_treat] %in% c("Not", "Sup")) * 100 +
(results[, 1:n_treat] == "Inf") * 50, 2, mean))
#ESS SUCRA
mean(apply((results[, (n_treat + 1):(2 * n_treat)] %in% c("Not", "Sup")) * 100 +
(results[, (n_treat + 1):(2 * n_treat)] == "Inf") * 50, 2, mean))
posterior_update <- function(X, mu0, nu, alpha, beta, n_sim){
n_treat <- ncol(X)
n_tot <- nrow(X)
x_bar <- apply(X, 2, mean)
var_scale <- (n_tot - 1) * apply(X, 2, var)
mean_diff <- (x_bar - mu0) ^ 2
post_sim <- matrix(NA, nrow = n_sim, ncol = n_treat)
for(i in 1:n_treat){
mu_post <- (nu  * mu0[i] + n_tot * x_bar[i]) / (nu + n_tot)
nu_post <- nu + n_tot
alpha_post <- alpha + n_tot/2
beta_post <- beta + var_scale[i] / 2 +
(n_tot * nu / (2 * (nu + n_tot))) * mean_diff[i]
params <- c(2 * alpha_post,
mu_post,
beta_post / (nu_post * alpha_post))
post_sim[, i] <- rt(n_sim, df = params[1]) * sqrt(params[3]) + params[2]
}
return(post_sim)
}
data_sim <- function(n_tot, mu0, tau){
X <- rnorm(n_tot, mu0, sqrt(1 / tau))
return(X)
}
SUCRA_calc <- function(posts, n_treat){
ranking<-c(1:n_treat)
cppFunction('NumericMatrix rankRows(NumericMatrix post_mu, NumericVector ranking) {
int nsamps = post_mu.nrow();
int n_treats = post_mu.ncol();
NumericMatrix ranks(nsamps, n_treats);
for(int k = 0; k < nsamps; k++) {
NumericVector x = post_mu.row(k);
NumericVector s = clone(x);
std::sort(s.begin(), s.end());
IntegerVector index(n_treats);
NumericVector ranked(n_treats);
for(int i = 0; i < n_treats; i++) {
for(int j = 0; j < n_treats; j++) {
if(x[j] == s[i]) {
index[j] = i+1;
}
}
}
ranks.row(k) = index;
}
return ranks;
}')
ranks <- rankRows(post_mu=posts, ranking=ranking)
p_ranks <- matrix(NA, nrow = n_treat, ncol = n_treat)
for(i in 1:n_treat){
for(j in 1:n_treat){
p_ranks[i, j] <- mean(ranks[, i] == j)
}
}
row.names(p_ranks) <- paste("trt", 1:n_treat, sep = "")
colnames(p_ranks) <- paste("rnk", 1:n_treat, sep = "")
p_best <- p_ranks[, 1]
if(n_treat == 2){
SUCRA <- p_best
}
if(n_treat > 2){
SUCRA <- apply(apply(p_ranks, 1, cumsum)[-n_treat, ], 2, mean)}
return(list(p_best = p_best, SUCRA = SUCRA))
}
library(doParallel)
library(foreach)
library(Rcpp)
n_treat <- 5
n_sim <- 10000
n_post <- 10000
inc <- 0.5
# mu_0 <- cumsum(c(0.4,rep(inc, (n_treat - 1))))
# mu_0 <- 0.4
nu_0 <- 1.05
alpha_0 <- 5.1
beta_0 <- 12.73
n_per <- 50
p_best_fut <- 0.057
p_best_sup <- 0.975
SUCRA_fut <- 0.472
SUCRA_sup <- 0.975
# T1 <- TRUE
T1 <- FALSE
registerDoParallel(cl <- makeCluster(4))
results <- foreach(k = 1:n_sim, .combine = rbind, .packages = c("Rcpp")) %dopar% {
set.seed(123 + k)
p_best_res <- rep("Not", n_treat)
SUCRA_res <- rep("Not", n_treat)
tau <- rgamma(1, shape = alpha_0, rate = beta_0)
if(T1){
mu_sim <- rep(rnorm(1, mean = mu_0, sqrt(1 / (tau * nu_0))), n_treat)
best = NA}
if(!T1){
mu_sim <- rnorm(n_treat, mu_0, sqrt(1 / (tau * nu_0)))
best = which.min(mu_sim)}
data_mat <- matrix(NA, nrow = n_per, ncol = n_treat)
for(i in 1:n_treat){
data_mat[, i] <- data_sim(n_per, mu_sim[i], tau)
}
posts <- posterior_update(data_mat, rep(mu_0[1], n_treat),
nu_0, alpha_0, beta_0, n_post)
calculation <- SUCRA_calc(posts, n_treat)
p_best <- calculation$p_best
SUCRA <- calculation$SUCRA
rec_p_best <- p_best > p_best_fut
rec_SUCRA <- SUCRA > SUCRA_fut
p_best_res[!rec_p_best] <- "Inf"
SUCRA_res[!rec_SUCRA] <- "Inf"
# P_best
if(sum(rec_p_best) == 1){
p_best_res[rec_p_best] <- "Sup"
}
if(sum(rec_p_best) > 1){
data_mat_init_p_best <- data_mat[, rec_p_best]
data_mat_add_p_best <- matrix(NA, nrow = n_per, ncol = sum(rec_p_best))
for(i in 1:sum(rec_p_best)){
data_mat_add_p_best[, i] <- data_sim(n_per, mu_sim[rec_p_best][i], tau)
}
data_mat_p_best <- rbind(data_mat_init_p_best, data_mat_add_p_best)
posts <- posterior_update(data_mat_p_best, rep(mu_0[1], sum(rec_p_best)),
nu_0, alpha_0, beta_0, n_post)
maxi <- apply(posts, 1, which.min)
p_best_res[rec_p_best][(table(maxi) / n_post) > p_best_sup] <- "Sup"
}
if(sum(rec_SUCRA) == 1){
SUCRA_res[rec_SUCRA] <- "Sup"
}
if(sum(rec_SUCRA) > 1){
data_mat_init_SUCRA <- data_mat[, rec_SUCRA]
data_mat_add_SUCRA <- matrix(NA, nrow = n_per, ncol = sum(rec_SUCRA))
for(i in 1:sum(rec_SUCRA)){
data_mat_add_SUCRA[, i] <- data_sim(n_per, mu_sim[rec_SUCRA][i], tau)
}
data_mat_SUCRA <- rbind(data_mat_init_SUCRA, data_mat_add_SUCRA)
posts <- posterior_update(data_mat_SUCRA, rep(mu_0[1], sum(rec_SUCRA)),
nu_0, alpha_0, beta_0, n_post)
calculation1 <- SUCRA_calc(posts, sum(rec_SUCRA))
SUCRA_res[rec_SUCRA][calculation1$SUCRA > SUCRA_sup] <- "Sup"
}
return(c(p_best_res, SUCRA_res, best))
}
stopCluster(cl)
colnames(results) <- c(paste("Pbest, trt", 1:n_treat, sep = ""),
paste("SUCRA, trt", 1:n_treat, sep = ""),
"best")
if(T1){
##PBEST
print(mean(apply(results[, 1:n_treat] == "Sup",1, sum)))
##SUCRA
print(mean(apply(results[, (n_treat + 1):(2 * n_treat)] == "Sup",1, sum)))
}
if(!T1){
##PBEST
print(mean(unlist(apply(results[, 1:n_treat],1,
function(x){max(0,which(x == "Sup"))})) == as.numeric(results[,2 * n_treat + 1])))
##SUCRA
print(mean(unlist(apply(results[, (n_treat + 1):(2 * n_treat)],1,
function(x){max(0,which(x == "Sup"))})) == as.numeric(results[,2 * n_treat + 1])))
}
#ESS PBest
mean(apply((results[, 1:n_treat] %in% c("Not", "Sup")) * 100 +
(results[, 1:n_treat] == "Inf") * 50, 2, mean))
#ESS SUCRA
mean(apply((results[, (n_treat + 1):(2 * n_treat)] %in% c("Not", "Sup")) * 100 +
(results[, (n_treat + 1):(2 * n_treat)] == "Inf") * 50, 2, mean))
library(tidyverse)
library(dplyr)
setwd("C:/Users/Anna Heath/OneDrive/OneDrive - SickKids/Admin Anna/Hiring and Staff/Ziming Chen 2022/PRACTICAL/SimulationMar20/Multinomial_AH/KJL")
LR_noeffect <- read.csv("LR_noeffect.csv")
LR_imp_both <- read.csv("LR_imp_both.csv")
LR_imp_lib_worse_mort <- read.csv("LR_imp_lib_worse_mort.csv")
LR_imp_mort_worse_lib <- read.csv("LR_imp_mort_worse_lib.csv")
LR_worsen_both <- read.csv("LR_worsen_both.csv")
LR_imp_lib_no_mort <- read.csv("LR_imp_lib_no_mort.csv")
LR_imp_mort_no_lib <- read.csv("LR_imp_mort_no_lib.csv")
#-------calculating lambda that controls type one error----------
LR_noeffect <- LR_noeffect %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(LR_noeffect) %>%
filter(V1 != "Error") %>%
mutate(trt_effect_YN = V1,
p_val = as.numeric(V2),
trt_est = as.numeric(V3),
trt_sd = as.numeric(V4))
(LR_type1_error <- mean(LR_noeffect$p_val/2 <= 0.05 & LR_noeffect$trt_est >= 0))
#--------based on the lambda, calculating "power" for each scenario----------
################## worsening both ################################
LR_worsen_both <- LR_worsen_both %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(LR_worsen_both) %>%
filter(V1 != "Error") %>%
mutate(trt_effect_YN = V1,
p_val = as.numeric(V2),
trt_est = as.numeric(V3),
trt_sd = as.numeric(V4))
(LR_worsen_both_pow <- mean(LR_worsen_both$p_val/2 <= 0.05 & LR_worsen_both$trt_est >= 0))
################## improving both ################################
LR_imp_both <- LR_imp_both %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(LR_imp_both) %>%
filter(V1 != "Error") %>%
mutate(trt_effect_YN = V1,
p_val = as.numeric(V2),
trt_est = as.numeric(V3),
trt_sd = as.numeric(V4))
(LR_imp_both_pow <- mean(LR_imp_both$p_val/2 <= 0.05 & LR_imp_both$trt_est >= 0))
################## improving liberation worsening mortality ################################
LR_imp_lib_worse_mort <- LR_imp_lib_worse_mort %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(LR_imp_lib_worse_mort) %>%
filter(V1 != "Error") %>%
mutate(trt_effect_YN = V1,
p_val = as.numeric(V2),
trt_est = as.numeric(V3),
trt_sd = as.numeric(V4))
(LR_imp_lib_worse_mort_pow <- mean(LR_imp_lib_worse_mort$p_val/2 <= 0.05 & LR_imp_lib_worse_mort$trt_est >= 0))
################## improving mortality worsening liberation ################################
LR_imp_mort_worse_lib <- LR_imp_mort_worse_lib %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(LR_imp_mort_worse_lib) %>%
filter(V1 != "Error") %>%
mutate(trt_effect_YN = V1,
p_val = as.numeric(V2),
trt_est = as.numeric(V3),
trt_sd = as.numeric(V4))
(LR_imp_mort_worse_lib_pow <- mean(LR_imp_mort_worse_lib$p_val/2 <= 0.05 & LR_imp_mort_worse_lib$trt_est >= 0))
################## improving liberation no mortality ################################
LR_imp_lib_no_mort <- LR_imp_lib_no_mort %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(LR_imp_lib_no_mort) %>%
filter(V1 != "Error") %>%
mutate(trt_effect_YN = V1,
p_val = as.numeric(V2),
trt_est = as.numeric(V3),
trt_sd = as.numeric(V4))
(LR_imp_lib_no_mort_pow <- mean(LR_imp_lib_no_mort$p_val/2 <= 0.05 & LR_imp_lib_no_mort$trt_est >= 0))
################## improving mortality no liberation ################################
LR_imp_mort_no_lib <- LR_imp_mort_no_lib %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(LR_imp_mort_no_lib) %>%
filter(V1 != "Error") %>%
mutate(trt_effect_YN = V1,
p_val = as.numeric(V2),
trt_est = as.numeric(V3),
trt_sd = as.numeric(V4))
(LR_imp_mort_no_lib_pow <- mean(LR_imp_mort_no_lib$p_val/2 <= 0.05 & LR_imp_mort_no_lib$trt_est >= 0))
LR_1 <- data.frame(scenario = c("no_eff", "worsen_both", "imp_both", "worsen_mort_imp_lib", "worsen_lib_imp_mort", "imp_lib_no_mort", "imp_mort_no_lib"),
post_p = c(LR_type1_error, LR_worsen_both_pow, LR_imp_both_pow, LR_imp_lib_worse_mort_pow, LR_imp_mort_worse_lib_pow, LR_imp_lib_no_mort_pow, LR_imp_mort_no_lib_pow),
trt_est = c(mean(LR_noeffect$trt_est), mean(LR_worsen_both$trt_est), mean(LR_imp_both$trt_est), mean(LR_imp_lib_worse_mort$trt_est), mean(LR_imp_mort_worse_lib$trt_est), mean(LR_imp_lib_no_mort$trt_est), mean(LR_imp_mort_no_lib$trt_est)),
sd_est = c(mean(LR_noeffect$trt_sd), mean(LR_worsen_both$trt_sd), mean(LR_imp_both$trt_sd), mean(LR_imp_lib_worse_mort$trt_sd), mean(LR_imp_mort_worse_lib$trt_sd), mean(LR_imp_lib_no_mort$trt_sd), mean(LR_imp_mort_no_lib$trt_sd)))
sqrt(LR_1$post_p*(1 - LR_1$post_p)/nrow(LR_imp_lib_no_mort))[c(1,3,2,5,4,7,6)]
LR_1
