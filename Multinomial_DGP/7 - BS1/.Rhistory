}
else{
data[i, 3] <- sample(VFDs, 1, prob = ctl_prop)
}
}
#using r-inla package, the censoring status should be 1 for event and 0 for censored
censor <- NULL
time <- NULL
death <- NULL
for(j in 1 : nrow(data)){
if(data$VFDs[j] == -1){
censor[j] <- 0
time[j] <- data$death_time[j]
death[j] <- 1
}
else if(data$VFDs[j] == 0){
censor[j] <- 0
time[j] <- 28
death[j] <- 0
}
else{
censor[j] <- 1
time[j] <- data$VFDs[j]
death[j] <- 0
}
}
data <- data %>%
mutate(censor = censor,
time = time,
death = death)
return(data)
}
KJL_single_sim <- function(OR_mort, OR_lib){
data <- multinomial_data_gen_diff_effect(OR_mort, OR_lib)
data <- data %>%
mutate(treatment = ifelse(treatment == "trt", 1, 0),
VFDs = VFDs + 1)
#####################################################
#####    Analysis               #####################
#####################################################
tryCatch({
#-------------third definition of ordinal outcome using INLA------------
model <- truncComp(VFDs ~ treatment, atom = 0, data = data, method="SPLRT")
trt_effect_vector <- NULL
for(b in 1: 1000){
data2 <- data[sample(1:nrow(data), size = nrow(data), replace = TRUE), ]
model_lm <- lm(VFDs ~ treatment, data = data2)
trt_effect_vector[b] <- coef(model_lm)[2]
}
trt <- mean(na.omit(trt_effect_vector))
sd <- sd(na.omit(trt_effect_vector))
###################################################
###        p values                        ########
###################################################
p_val <- model$p
###################################################
###  positive treatment effect yes or no   ########
###################################################
trt_effect_YN <- ifelse(p_val < 0.05 & trt > 0, "Yes", "No")
return(c(trt_effect_YN,
p_val,
trt,
sd))
},
error = function(e){
print("Error")
trt_effect_YN <- "Error"
p_val <- "Error"
trt <- "Error"
sd <- "Error"
return(c(trt_effect_YN,
p_val,
trt,
sd))
}
)
}
#running the simulation for 1000 times to calculate the lambda to control for type one error
n_sim <- 2000
ncores <- detectCores() - 1
cl <- makeCluster(ncores)
registerDoParallel(cl)
Sim_Res <- foreach(k = 1:n_sim, .combine = rbind,
.packages = c("boot", "dplyr", "tidyverse", "TruncComp")
) %dopar% {
set.seed(k + 5125)
KJL_single_sim(OR_mort = 1.3,
OR_lib = 0.7)
}
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
#this is generating multinomial probabilities for this data generation mechanism
multinomial_data_gen_diff_effect <- function(OR_mort, OR_lib){
VFDs <- c(seq(-1, 28, 1))[-30]
N <- c(115, 14, 2, 2, 7, 4, 2, 3, 2, 1, 2, 2, 3, 5, 3,
5, 5, 6, 6, 6, 5, 10, 11, 10, 8, 13, 25, 21, 17, 15)[-30]
#control group baseline proportion in each category
ctl_prop <- N/sum(N)
ctl_prop_cumsum <- cumsum(ctl_prop)
ctl_odds <- ctl_prop_cumsum/(1-ctl_prop_cumsum)
#treatment no effect
trt_odds <- OR_lib*ctl_odds
trt_prop_cumsum <- c((trt_odds/(1+trt_odds))[-29], 1)
trt_prop <- c(trt_prop_cumsum[1],diff(trt_prop_cumsum))
trt_prop <- trt_prop[-1] / sum(trt_prop[-1])
##############################################
#### trt imp lib worse mort       ############(follow improving both outcomes)
##############################################
trt_diff_effect_odds1 <- OR_mort * ctl_odds[1]
trt_diff_effect_prop1 <- trt_diff_effect_odds1/(1+trt_diff_effect_odds1)
trt_diff_effect_prop <- c(trt_diff_effect_prop1, trt_prop * (1 - trt_diff_effect_prop1))
#######################################################################
#####   Generating the patient matrix based on above ##################
#######################################################################
treatment <- c("trt", "ctl")
data <- as.data.frame(matrix(nrow = 1500, ncol = 4))
colnames(data) <- c("ID", "treatment", "VFDs","death_time")
for(i in 1 : nrow(data)){
data[i, 1] <- i
data[i, 4] <- ceiling(runif(1, min = 0, max = 90))
data[i, 2] <- sample(treatment, 1, prob = c(0.5, 0.5), replace = TRUE)
if(data[i, 2] == "trt"){
data[i, 3] <- sample(VFDs, 1, prob = trt_diff_effect_prop)
}
else{
data[i, 3] <- sample(VFDs, 1, prob = ctl_prop)
}
}
#using r-inla package, the censoring status should be 1 for event and 0 for censored
censor <- NULL
time <- NULL
death <- NULL
for(j in 1 : nrow(data)){
if(data$VFDs[j] == -1){
censor[j] <- 0
time[j] <- data$death_time[j]
death[j] <- 1
}
else if(data$VFDs[j] == 0){
censor[j] <- 0
time[j] <- 28
death[j] <- 0
}
else{
censor[j] <- 1
time[j] <- data$VFDs[j]
death[j] <- 0
}
}
data <- data %>%
mutate(censor = censor,
time = time,
death = death)
return(data)
}
KJL_single_sim <- function(OR_mort, OR_lib){
data <- multinomial_data_gen_diff_effect(OR_mort, OR_lib)
data <- data %>%
mutate(treatment = ifelse(treatment == "trt", 1, 0),
VFDs = VFDs + 1)
#####################################################
#####    Analysis               #####################
#####################################################
tryCatch({
#-------------third definition of ordinal outcome using INLA------------
model <- truncComp(VFDs ~ treatment, atom = 0, data = data, method="SPLRT")
trt_effect_vector <- NULL
for(b in 1: 1000){
data2 <- data[sample(1:nrow(data), size = nrow(data), replace = TRUE), ]
model_lm <- lm(VFDs ~ treatment, data = data2)
trt_effect_vector[b] <- coef(model_lm)[2]
}
trt <- mean(na.omit(trt_effect_vector))
sd <- sd(na.omit(trt_effect_vector))
###################################################
###        p values                        ########
###################################################
p_val <- model$p
###################################################
###  positive treatment effect yes or no   ########
###################################################
trt_effect_YN <- ifelse(p_val < 0.05 & trt > 0, "Yes", "No")
return(c(trt_effect_YN,
p_val,
trt,
sd))
},
error = function(e){
print("Error")
trt_effect_YN <- "Error"
p_val <- "Error"
trt <- "Error"
sd <- "Error"
return(c(trt_effect_YN,
p_val,
trt,
sd))
}
)
}
#running the simulation for 1000 times to calculate the lambda to control for type one error
n_sim <- 2000
ncores <- detectCores() - 1
################################################################################################
##########                    Simulations for PRACTICAL                   ######################
########                    Linear Regression+KG&J                                   ###########
################################################################################################
library(boot)
library(dplyr)
library(doParallel)
library(foreach)
library(tidyverse)
source("C:/Users/Anna Heath/OneDrive/OneDrive - SickKids/Admin Anna/Hiring and Staff/Ziming Chen 2022/PRACTICAL/SimulationMar20/Multinomial_AH/results/BS2_results.R")
setwd("C:/Users/Anna Heath/OneDrive/OneDrive - SickKids/Admin Anna/Hiring and Staff/Ziming Chen 2022/PRACTICAL/SimulationMar20/Multinomial_AH/results")
setwd("C:/Users/Anna Heath/OneDrive/OneDrive - SickKids/Admin Anna/Hiring and Staff/Ziming Chen 2022/PRACTICAL/SimulationMar20/Multinomial_AH/BS2")
BS2_noeffect <- read.csv("BS2_noeffect.csv")
BS2_imp_both <- read.csv("BS2_imp_both.csv")
BS2_imp_lib_worse_mort <- read.csv("BS2_imp_lib_worse_mort.csv")
BS2_imp_mort_worse_lib <- read.csv("BS2_imp_mort_worse_lib.csv")
BS2_worsen_both <- read.csv("BS2_worsen_both.csv")
BS2_imp_mort_no_lib <- read.csv("BS2_imp_mort_no_lib.csv")
BS2_imp_lib_no_mort <- read.csv("BS2_imp_lib_no_mort.csv")
#-------calculating lambda that controls type one error----------
BS2_noeffect <- BS2_noeffect %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(BS2_noeffect) %>%
filter(trt_death_BM != "Error") %>%
mutate(post_prob_death = as.numeric(post_prob_death_BM),
post_prob_liberation = as.numeric(post_prob_extubation_surv),
trt_death = as.numeric(trt_death_BM),
trt_liberation = as.numeric(trt_extubation_surv),
sd_death = as.numeric(sd_death_BM),
sd_extubation = as.numeric(sd_extubation_surv))
library(tidyverse)
library(dplyr)
setwd("C:/Users/Anna Heath/OneDrive/OneDrive - SickKids/Admin Anna/Hiring and Staff/Ziming Chen 2022/PRACTICAL/SimulationMar20/Multinomial_AH/BS2")
BS2_noeffect <- read.csv("BS2_noeffect.csv")
BS2_imp_both <- read.csv("BS2_imp_both.csv")
BS2_imp_lib_worse_mort <- read.csv("BS2_imp_lib_worse_mort.csv")
BS2_imp_mort_worse_lib <- read.csv("BS2_imp_mort_worse_lib.csv")
BS2_worsen_both <- read.csv("BS2_worsen_both.csv")
BS2_imp_mort_no_lib <- read.csv("BS2_imp_mort_no_lib.csv")
BS2_imp_lib_no_mort <- read.csv("BS2_imp_lib_no_mort.csv")
#-------calculating lambda that controls type one error----------
BS2_noeffect <- BS2_noeffect %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(BS2_noeffect) %>%
filter(trt_death_BM != "Error") %>%
mutate(post_prob_death = as.numeric(post_prob_death_BM),
post_prob_liberation = as.numeric(post_prob_extubation_surv),
trt_death = as.numeric(trt_death_BM),
trt_liberation = as.numeric(trt_extubation_surv),
sd_death = as.numeric(sd_death_BM),
sd_extubation = as.numeric(sd_extubation_surv))
BS2_noeffect <- BS2_noeffect %>%
mutate(max_post = pmax(post_prob_death, post_prob_liberation))
BS2_threshold <- BS2_noeffect %>%
filter(post_prob_death >= 0.2 & post_prob_liberation >= 0.2) %>%
arrange(desc(max_post))
first_100 <- head(BS2_threshold, nrow(BS2_noeffect)*0.05)
#0.9666774
lambda_BS2 <- as.numeric(first_100[nrow(first_100),]$max_post)
#--------based on the lambda, calculating "power" for each scenario----------
################## worsening both ################################
BS2_worsen_both <- BS2_worsen_both %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(BS2_noeffect) %>%
filter(trt_death_BM != "Error") %>%
mutate(post_prob_death = as.numeric(post_prob_death_BM),
post_prob_liberation = as.numeric(post_prob_extubation_surv),
trt_death = as.numeric(trt_death_BM),
trt_liberation = as.numeric(trt_extubation_surv),
sd_death = as.numeric(sd_death_BM),
sd_extubation = as.numeric(sd_extubation_surv))
BS2_worsen_both <- BS2_worsen_both %>%
mutate(max_post = pmax(post_prob_death, post_prob_liberation))
BS2_worsen_both_power <- BS2_worsen_both %>%
filter(post_prob_death >= 0.2 & post_prob_liberation >= 0.2) %>%
arrange(desc(max_post))
(BS2_post_p_worsen_both <- nrow(BS2_worsen_both_power[BS2_worsen_both_power$max_post > lambda_BS2,])/nrow(BS2_worsen_both))
################## improving both ################################
BS2_imp_both <- BS2_imp_both %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(BS2_noeffect) %>%
filter(trt_death_BM != "Error") %>%
mutate(post_prob_death = as.numeric(post_prob_death_BM),
post_prob_liberation = as.numeric(post_prob_extubation_surv),
trt_death = as.numeric(trt_death_BM),
trt_liberation = as.numeric(trt_extubation_surv),
sd_death = as.numeric(sd_death_BM),
sd_extubation = as.numeric(sd_extubation_surv))
BS2_imp_both <- BS2_imp_both %>%
mutate(max_post = pmax(post_prob_death, post_prob_liberation))
BS2_imp_both_power <- BS2_imp_both %>%
filter(post_prob_death >= 0.2 & post_prob_liberation >= 0.2) %>%
arrange(desc(max_post))
(BS2_post_p_imp_both <- nrow(BS2_imp_both_power[BS2_imp_both_power$max_post > lambda_BS2,])/nrow(BS2_imp_both))
################## improving liberation worsening mortality ################################
BS2_imp_lib_worse_mort <- BS2_imp_lib_worse_mort %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(BS2_noeffect) %>%
filter(trt_death_BM != "Error") %>%
mutate(post_prob_death = as.numeric(post_prob_death_BM),
post_prob_liberation = as.numeric(post_prob_extubation_surv),
trt_death = as.numeric(trt_death_BM),
trt_liberation = as.numeric(trt_extubation_surv),
sd_death = as.numeric(sd_death_BM),
sd_extubation = as.numeric(sd_extubation_surv))
BS2_imp_lib_worse_mort <- BS2_imp_lib_worse_mort %>%
mutate(max_post = pmax(post_prob_death, post_prob_liberation))
BS2_imp_lib_worse_mort_power <- BS2_imp_lib_worse_mort %>%
filter(post_prob_death >= 0.2 & post_prob_liberation >= 0.2) %>%
arrange(desc(max_post))
(BS2_post_p_imp_lib_worse_mort <- nrow(BS2_imp_lib_worse_mort_power[BS2_imp_lib_worse_mort_power$max_post > lambda_BS2,])/nrow(BS2_imp_lib_worse_mort))
################## improving mortality worsening liberation ################################
BS2_imp_mort_worse_lib <- BS2_imp_mort_worse_lib %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(BS2_noeffect) %>%
filter(trt_death_BM != "Error") %>%
mutate(post_prob_death = as.numeric(post_prob_death_BM),
post_prob_liberation = as.numeric(post_prob_extubation_surv),
trt_death = as.numeric(trt_death_BM),
trt_liberation = as.numeric(trt_extubation_surv),
sd_death = as.numeric(sd_death_BM),
sd_extubation = as.numeric(sd_extubation_surv))
BS2_imp_mort_worse_lib <- BS2_imp_mort_worse_lib %>%
mutate(max_post = pmax(post_prob_death, post_prob_liberation))
BS2_imp_mort_worse_lib_power <- BS2_imp_mort_worse_lib %>%
filter(post_prob_death >= 0.2 & post_prob_liberation >= 0.2) %>%
arrange(desc(max_post))
(BS2_post_p_imp_mort_worse_lib <- nrow(BS2_imp_mort_worse_lib_power[BS2_imp_mort_worse_lib_power$max_post > lambda_BS2,])/nrow(BS2_imp_mort_worse_lib))
################## improving mortality no liberation ################################
BS2_imp_mort_no_lib <- BS2_imp_mort_no_lib %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(BS2_noeffect) %>%
filter(trt_death_BM != "Error") %>%
mutate(post_prob_death = as.numeric(post_prob_death_BM),
post_prob_liberation = as.numeric(post_prob_extubation_surv),
trt_death = as.numeric(trt_death_BM),
trt_liberation = as.numeric(trt_extubation_surv),
sd_death = as.numeric(sd_death_BM),
sd_extubation = as.numeric(sd_extubation_surv))
BS2_imp_mort_no_lib <- BS2_imp_mort_no_lib %>%
mutate(max_post = pmax(post_prob_death, post_prob_liberation))
BS2_imp_mort_no_lib_power <- BS2_imp_mort_no_lib %>%
filter(post_prob_death >= 0.2 & post_prob_liberation >= 0.2) %>%
arrange(desc(max_post))
(BS2_post_p_imp_mort_no_lib <- nrow(BS2_imp_mort_no_lib_power[BS2_imp_mort_no_lib_power$max_post > lambda_BS2,])/nrow(BS2_imp_mort_no_lib))
################## improving liberation no mortality ################################
BS2_imp_lib_no_mort <- BS2_imp_lib_no_mort %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(BS2_noeffect) %>%
filter(trt_death_BM != "Error") %>%
mutate(post_prob_death = as.numeric(post_prob_death_BM),
post_prob_liberation = as.numeric(post_prob_extubation_surv),
trt_death = as.numeric(trt_death_BM),
trt_liberation = as.numeric(trt_extubation_surv),
sd_death = as.numeric(sd_death_BM),
sd_extubation = as.numeric(sd_extubation_surv))
BS2_imp_lib_no_mort <- BS2_imp_lib_no_mort %>%
mutate(max_post = pmax(post_prob_death, post_prob_liberation))
BS2_imp_lib_no_mort_power <- BS2_imp_lib_no_mort %>%
filter(post_prob_death >= 0.2 & post_prob_liberation >= 0.2) %>%
arrange(desc(max_post))
(BS2_post_p_imp_lib_no_mort <- nrow(BS2_imp_lib_no_mort_power[BS2_imp_lib_no_mort_power$max_post > lambda_BS2,])/nrow(BS2_imp_lib_no_mort))
BS2_1 <- data.frame(scenario = c("no_eff", "worsen_both", "imp_both", "worsen_mort_imp_lib", "imp_mort_worse_lib", "imp_mort_no_lib", "imp_lib_no_mort"),
post_p = c(0.05, BS2_post_p_worsen_both, BS2_post_p_imp_both, BS2_post_p_imp_lib_worse_mort, BS2_post_p_imp_mort_worse_lib, BS2_post_p_imp_mort_no_lib, BS2_post_p_imp_lib_no_mort),
trt_death_est_mean = c(mean(BS2_noeffect$trt_death), mean(BS2_worsen_both$trt_death), mean(BS2_imp_both$trt_death), mean(BS2_imp_lib_worse_mort$trt_death), mean(BS2_imp_mort_worse_lib$trt_death), mean(BS2_imp_mort_no_lib$trt_death), mean(BS2_imp_lib_no_mort$trt_death)),
trt_liberation_est_mean = c(mean(BS2_noeffect$trt_liberation), mean(BS2_worsen_both$trt_liberation), mean(BS2_imp_both$trt_liberation), mean(BS2_imp_lib_worse_mort$trt_liberation), mean(BS2_imp_mort_worse_lib$trt_liberation), mean(BS2_imp_mort_no_lib$trt_liberation), mean(BS2_imp_lib_no_mort$trt_liberation)),
sd_death_est_mean = c(mean(BS2_noeffect$sd_death), mean(BS2_worsen_both$sd_death), mean(BS2_imp_both$sd_death), mean(BS2_imp_lib_worse_mort$sd_death), mean(BS2_imp_mort_worse_lib$sd_death), mean(BS2_imp_mort_no_lib$sd_death), mean(BS2_imp_lib_no_mort$sd_death)),
sd_liberation_est_mean = c(mean(BS2_noeffect$sd_extubation), mean(BS2_worsen_both$sd_extubation), mean(BS2_imp_both$sd_extubation), mean(BS2_imp_lib_worse_mort$sd_extubation), mean(BS2_imp_mort_worse_lib$sd_extubation), mean(BS2_imp_mort_no_lib$sd_extubation), mean(BS2_imp_lib_no_mort$sd_extubation)))
BS2_1
setwd("C:/Users/Anna Heath/OneDrive/OneDrive - SickKids/Admin Anna/Hiring and Staff/Ziming Chen 2022/PRACTICAL/SimulationMar20/Multinomial_AH/BS1")
BS1_noeffect <- read.csv("BS1_noeffect.csv")
BS1_imp_both <- read.csv("BS1_imp_both.csv")
BS1_imp_lib_worse_mort <- read.csv("BS1_imp_lib_worse_mort.csv")
BS1_imp_mort_worse_lib <- read.csv("BS1_imp_mort_worse_lib.csv")
BS1_worsen_both <- read.csv("BS1_worsen_both.csv")
BS1_imp_mort_no_lib <- read.csv("BS1_imp_mort_no_lib.csv")
BS1_imp_lib_no_mort <- read.csv("BS1_imp_lib_no_mort.csv")
#-------calculating lambda that controls type one error----------
BS1_noeffect <- BS1_noeffect %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(BS1_noeffect) %>%
filter(trt_death_BM != "Error") %>%
mutate(post_prob_death = as.numeric(post_prob_death_BM),
post_prob_liberation = as.numeric(post_prob_extubation_surv),
trt_death = as.numeric(trt_death_BM),
trt_liberation = as.numeric(trt_extubation_surv),
sd_death = as.numeric(sd_death_BM),
sd_extubation = as.numeric(sd_extubation_surv))
BS1_noeffect <- BS1_noeffect %>%
mutate(max_post = pmax(post_prob_death, post_prob_liberation))
BS1_threshold <- BS1_noeffect %>%
filter(post_prob_death >= 0.2 & post_prob_liberation >= 0.2) %>%
arrange(desc(max_post))
first_100 <- head(BS1_threshold, nrow(BS1_noeffect)*0.05)
#0.9666774
lambda_BS1 <- as.numeric(first_100[nrow(first_100),]$max_post)
#--------based on the lambda, calculating "power" for each scenario----------
################## worsening both ################################
BS1_worsen_both <- BS1_worsen_both %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(BS1_noeffect) %>%
filter(trt_death_BM != "Error") %>%
mutate(post_prob_death = as.numeric(post_prob_death_BM),
post_prob_liberation = as.numeric(post_prob_extubation_surv),
trt_death = as.numeric(trt_death_BM),
trt_liberation = as.numeric(trt_extubation_surv),
sd_death = as.numeric(sd_death_BM),
sd_extubation = as.numeric(sd_extubation_surv))
BS1_worsen_both <- BS1_worsen_both %>%
mutate(max_post = pmax(post_prob_death, post_prob_liberation))
BS1_worsen_both_power <- BS1_worsen_both %>%
filter(post_prob_death >= 0.2 & post_prob_liberation >= 0.2) %>%
arrange(desc(max_post))
(BS1_post_p_worsen_both <- nrow(BS1_worsen_both_power[BS1_worsen_both_power$max_post > lambda_BS1,])/nrow(BS1_worsen_both))
################## improving both ################################
BS1_imp_both <- BS1_imp_both %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(BS1_noeffect) %>%
filter(trt_death_BM != "Error") %>%
mutate(post_prob_death = as.numeric(post_prob_death_BM),
post_prob_liberation = as.numeric(post_prob_extubation_surv),
trt_death = as.numeric(trt_death_BM),
trt_liberation = as.numeric(trt_extubation_surv),
sd_death = as.numeric(sd_death_BM),
sd_extubation = as.numeric(sd_extubation_surv))
BS1_imp_both <- BS1_imp_both %>%
mutate(max_post = pmax(post_prob_death, post_prob_liberation))
BS1_imp_both_power <- BS1_imp_both %>%
filter(post_prob_death >= 0.2 & post_prob_liberation >= 0.2) %>%
arrange(desc(max_post))
(BS1_post_p_imp_both <- nrow(BS1_imp_both_power[BS1_imp_both_power$max_post > lambda_BS1,])/nrow(BS1_imp_both))
################## improving liberation worsening mortality ################################
BS1_imp_lib_worse_mort <- BS1_imp_lib_worse_mort %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(BS1_noeffect) %>%
filter(trt_death_BM != "Error") %>%
mutate(post_prob_death = as.numeric(post_prob_death_BM),
post_prob_liberation = as.numeric(post_prob_extubation_surv),
trt_death = as.numeric(trt_death_BM),
trt_liberation = as.numeric(trt_extubation_surv),
sd_death = as.numeric(sd_death_BM),
sd_extubation = as.numeric(sd_extubation_surv))
BS1_imp_lib_worse_mort <- BS1_imp_lib_worse_mort %>%
mutate(max_post = pmax(post_prob_death, post_prob_liberation))
BS1_imp_lib_worse_mort_power <- BS1_imp_lib_worse_mort %>%
filter(post_prob_death >= 0.2 & post_prob_liberation >= 0.2) %>%
arrange(desc(max_post))
(BS1_post_p_imp_lib_worse_mort <- nrow(BS1_imp_lib_worse_mort_power[BS1_imp_lib_worse_mort_power$max_post > lambda_BS1,])/nrow(BS1_imp_lib_worse_mort))
################## improving mortality no liberation ################################
BS1_imp_mort_worse_lib <- BS1_imp_mort_worse_lib %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(BS1_worseeffect) %>%
filter(trt_death_BM != "Error") %>%
mutate(post_prob_death = as.numeric(post_prob_death_BM),
post_prob_liberation = as.numeric(post_prob_extubation_surv),
trt_death = as.numeric(trt_death_BM),
trt_liberation = as.numeric(trt_extubation_surv),
sd_death = as.numeric(sd_death_BM),
sd_extubation = as.numeric(sd_extubation_surv))
BS1_imp_mort_worse_lib <- BS1_imp_mort_worse_lib %>%
mutate(max_post = pmax(post_prob_death, post_prob_liberation))
BS1_imp_mort_worse_lib_power <- BS1_imp_mort_worse_lib %>%
filter(post_prob_death >= 0.2 & post_prob_liberation >= 0.2) %>%
arrange(desc(max_post))
(BS1_post_p_imp_mort_worse_lib <- nrow(BS1_imp_mort_worse_lib_power[BS1_imp_mort_worse_lib_power$max_post > lambda_BS1,])/nrow(BS1_imp_mort_worse_lib))
################## improving mortality no liberation ################################
BS1_imp_mort_no_lib <- BS1_imp_mort_no_lib %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(BS1_noeffect) %>%
filter(trt_death_BM != "Error") %>%
mutate(post_prob_death = as.numeric(post_prob_death_BM),
post_prob_liberation = as.numeric(post_prob_extubation_surv),
trt_death = as.numeric(trt_death_BM),
trt_liberation = as.numeric(trt_extubation_surv),
sd_death = as.numeric(sd_death_BM),
sd_extubation = as.numeric(sd_extubation_surv))
BS1_imp_mort_no_lib <- BS1_imp_mort_no_lib %>%
mutate(max_post = pmax(post_prob_death, post_prob_liberation))
BS1_imp_mort_no_lib_power <- BS1_imp_mort_no_lib %>%
filter(post_prob_death >= 0.2 & post_prob_liberation >= 0.2) %>%
arrange(desc(max_post))
(BS1_post_p_imp_mort_no_lib <- nrow(BS1_imp_mort_no_lib_power[BS1_imp_mort_no_lib_power$max_post > lambda_BS1,])/nrow(BS1_imp_mort_no_lib))
################## improving mortality no liberation ################################
BS1_imp_lib_no_mort <- BS1_imp_lib_no_mort %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(BS1_noeffect) %>%
filter(trt_death_BM != "Error") %>%
mutate(post_prob_death = as.numeric(post_prob_death_BM),
post_prob_liberation = as.numeric(post_prob_extubation_surv),
trt_death = as.numeric(trt_death_BM),
trt_liberation = as.numeric(trt_extubation_surv),
sd_death = as.numeric(sd_death_BM),
sd_extubation = as.numeric(sd_extubation_surv))
BS1_imp_lib_no_mort <- BS1_imp_lib_no_mort %>%
mutate(max_post = pmax(post_prob_death, post_prob_liberation))
BS1_imp_lib_no_mort_power <- BS1_imp_lib_no_mort %>%
filter(post_prob_death >= 0.2 & post_prob_liberation >= 0.2) %>%
arrange(desc(max_post))
(BS1_post_p_imp_lib_no_mort <- nrow(BS1_imp_lib_no_mort_power[BS1_imp_lib_no_mort_power$max_post > lambda_BS1,])/nrow(BS1_imp_lib_no_mort))
BS1_1 <- data.frame(scenario = c("no_eff", "worsen_both", "imp_both", "worsen_mort_imp_lib", "imp_mort_worse_lib", "imp_mort_no_lib", "imp_lib_no_mort"),
post_p = c(0.05, BS1_post_p_worsen_both, BS1_post_p_imp_both, BS1_post_p_imp_lib_worse_mort, BS1_post_p_imp_mort_worse_lib, BS1_post_p_imp_mort_no_lib, BS1_post_p_imp_lib_no_mort),
trt_death_est_mean = c(mean(BS1_noeffect$trt_death), mean(BS1_worsen_both$trt_death), mean(BS1_imp_both$trt_death), mean(BS1_imp_lib_worse_mort$trt_death), mean(BS1_imp_mort_worse_lib$trt_death), mean(BS1_imp_mort_no_lib$trt_death), mean(BS1_imp_lib_no_mort$trt_death)),
trt_liberation_est_mean = c(mean(BS1_noeffect$trt_liberation), mean(BS1_worsen_both$trt_liberation), mean(BS1_imp_both$trt_liberation), mean(BS1_imp_lib_worse_mort$trt_liberation), mean(BS1_imp_mort_worse_lib$trt_liberation), mean(BS1_imp_mort_no_lib$trt_liberation), mean(BS1_imp_lib_no_mort$trt_liberation)),
sd_death_est_mean = c(mean(BS1_noeffect$sd_death), mean(BS1_worsen_both$sd_death), mean(BS1_imp_both$sd_death), mean(BS1_imp_lib_worse_mort$sd_death), mean(BS1_imp_mort_worse_lib$sd_death), mean(BS1_imp_mort_no_lib$sd_death), mean(BS1_imp_lib_no_mort$sd_death)),
sd_liberation_est_mean = c(mean(BS1_noeffect$sd_extubation), mean(BS1_worsen_both$sd_extubation), mean(BS1_imp_both$sd_extubation), mean(BS1_imp_lib_worse_mort$sd_extubation), mean(BS1_imp_mort_worse_lib$sd_extubation), mean(BS1_imp_mort_no_lib$sd_extubation), mean(BS1_imp_lib_no_mort$sd_extubation)))
BS1_1
BS2_1
