amount <- (amount - 400) * 1/(1+0.06/12)
months <- months + 1
}
months
(131349.4 * 	0.619157)
(131349.4 * 	0.619157) - 22015.00
((131349.4 * 	0.619157) - 22015.00) * 0.09
((131349.4 * 	0.619157) - 22015.00) * 0.09 / 12
amount <- 7799.88
months <- 1
while(amount > 0){
amount <- (amount - 444.83) * 1/(1+0.06/12)
months <- months + 1
}
months
INLA::inla.doc("pom")
trans_mat <- matrix(c(0.75 , 0.2, 0.05,
0, 0.95, 0.05,
0, 0, 1),
nrow = 3)
trans_mat
trans_mat <- matrix(c(0.75 , 0.2, 0.05,
0, 0.95, 0.05,
0, 0, 1),
nrow = 3, byrow = TRUE)
trans_mat
trace <- matrix(NA, nrow = 3, ncol = 20 + 1)
trace[1, ]
trace[, 1] <- c(1, 0, 0)
trace[, i + 1] <- trace[, i] %*% trans_mat
for(i in 1:20){
trace[, i + 1] <- trace[, i] %*% trans_mat
}
trace
trace %*% c(1, 0.5, 0)
trace %*% t(c(1, 0.5, 0))
c(1, 0.5, 0) %*% trace
sum(c(1, 0.5, 0) %*% trace)
######################################################################
###########     multinomial ordinal 3 imp lib worsen mort        #####
######################################################################
library(boot)
library(dplyr)
library(doParallel)
library(foreach)
library(tidyverse)
library(INLA)
#this is generating multinomial probabilities for this data generation mechanism
multinomial_data_gen_diff_effect <- function(OR_mort, OR_lib){
VFDs <- c(seq(-1, 28, 1))[-30]
N <- c(115, 14, 2, 2, 7, 4, 2, 3, 2, 1, 2, 2, 3, 5, 3,
5, 5, 6, 6, 6, 5, 10, 11, 10, 8, 13, 25, 21, 17, 15)[-30]
#control group baseline proportion in each category
ctl_prop <- N/sum(N)
ctl_prop_cumsum <- cumsum(ctl_prop)
ctl_odds <- ctl_prop_cumsum/(1-ctl_prop_cumsum)
#treatment no effect
trt_odds <- OR_lib*ctl_odds
trt_prop_cumsum <- c((trt_odds/(1+trt_odds))[-29], 1)
trt_prop <- c(trt_prop_cumsum[1],diff(trt_prop_cumsum))
trt_prop <- trt_prop[-1] / sum(trt_prop[-1])
##############################################
#### trt imp lib worse mort       ############(follow improving both outcomes)
##############################################
trt_diff_effect_odds1 <- OR_mort * ctl_odds[1]
trt_diff_effect_prop1 <- trt_diff_effect_odds1/(1+trt_diff_effect_odds1)
trt_diff_effect_prop <- c(trt_diff_effect_prop1, trt_prop * (1 - trt_diff_effect_prop1))
#######################################################################
#####   Generating the patient matrix based on above ##################
#######################################################################
treatment <- c("trt", "ctl")
data <- as.data.frame(matrix(nrow = 1500, ncol = 4))
colnames(data) <- c("ID", "treatment", "VFDs","death_time")
for(i in 1 : nrow(data)){
data[i, 1] <- i
data[i, 4] <- ceiling(runif(1, min = 0, max = 90))
data[i, 2] <- sample(treatment, 1, prob = c(0.5, 0.5), replace = TRUE)
if(data[i, 2] == "trt"){
data[i, 3] <- sample(VFDs, 1, prob = trt_diff_effect_prop)
}
else{
data[i, 3] <- sample(VFDs, 1, prob = ctl_prop)
}
}
data <- data %>%
mutate(VFDs2 = case_when(VFDs == -1 ~ 1,
VFDs == 0 ~ 2,
VFDs >= 1 & VFDs <= 5 ~ 3,
VFDs >= 6 & VFDs <= 12 ~ 4,
VFDs >= 13 & VFDs <= 17 ~ 5,
VFDs >= 18 & VFDs <= 21 ~ 6,
VFDs >= 22 & VFDs <= 24 ~ 7,
VFDs == 25 ~ 8,
VFDs == 26 ~ 9,
VFDs == 27 ~ 10))
return(data)
}#OR = 1
ordinal3_single_sim <- function(OR_mort, OR_lib){
data <- multinomial_data_gen_diff_effect(OR_mort, OR_lib)
#####################################################
#####    Analysis               #####################
#####################################################
tryCatch({
#----------------------------------------------------------------------
#-------------   Ordinal Outcome   ------------------------------------
#----------------------------------------------------------------------
#-------------third definition of ordinal outcome using INLA------------
lc <- inla.make.lincombs(treatmenttrt = -1)
result_OO3 <- inla(VFDs2 ~ treatment,
data = data,
family = "pom",
lincomb = lc,
control.fixed = list(mean= 0, prec= 0.1),
control.family = list(hyper = list(theta1 = list(param = 100))),
control.compute = list(dic = T, cpo = T, config = T),
verbose = F)
post_prob_OO3 <- inla.pmarginal(0, result_OO3$marginals.lincomb.derived$lc00000001)
###################################################
###        treatment effect estimates      ########
###################################################
trt_OO3  <- summary(result_OO3)$fixed[2,1]
###################################################
###        sd estimates                    ########
###################################################
sd_OO3  <- summary(result_OO3)$fixed[2,2]
return(c(post_prob_OO3,
trt_OO3,
sd_OO3
))
},
error = function(e){
print("Error in INLA")
post_prob_OO3 <- "Error"
trt_OO3 <- "Error"
sd_OO3 <- "Error"
return(c(post_prob_OO3,
trt_OO3,
sd_OO3))
}
)
}
#OR_mort = 1.2
#OR_lib = 0.8
#running the simulation for 1000 times to calculate the lambda to control for type one error
inla.setOption(num.threads = 8)
n_sim <- 2000
#ncores <- detectCores() - 1
#cl <- makeCluster(ncores)
#registerDoParallel(cl)
Sim_Res <- foreach(k = 1:n_sim, .combine = rbind,
.packages = c("boot", "dplyr", "tidyverse", "INLA")
) %do% {
set.seed(k + 5125)
ordinal3_single_sim(OR_mort = 0.75,
OR_lib = 1)
}
ordinal3_single_sim(OR_mort = 0.75,
OR_lib = 1)
VFDs <- c(seq(-1, 28, 1))[-30]
N <- c(115, 14, 2, 2, 7, 4, 2, 3, 2, 1, 2, 2, 3, 5, 3,
5, 5, 6, 6, 6, 5, 10, 11, 10, 8, 13, 25, 21, 17, 15)[-30]
#control group baseline proportion in each category
ctl_prop <- N/sum(N)
ctl_prop_cumsum <- cumsum(ctl_prop)
ctl_odds <- ctl_prop_cumsum/(1-ctl_prop_cumsum)
#treatment no effect
trt_odds <- OR_lib*ctl_odds
trt_prop_cumsum <- c((trt_odds/(1+trt_odds))[-29], 1)
trt_prop <- c(trt_prop_cumsum[1],diff(trt_prop_cumsum))
trt_prop <- trt_prop[-1] / sum(trt_prop[-1])
trt_diff_effect_odds1 <- OR_mort * ctl_odds[1]
trt_diff_effect_prop1 <- trt_diff_effect_odds1/(1+trt_diff_effect_odds1)
trt_diff_effect_prop <- c(trt_diff_effect_prop1, trt_prop * (1 - trt_diff_effect_prop1))
#######################################################################
#####   Generating the patient matrix based on above ##################
#######################################################################
treatment <- c("trt", "ctl")
data <- as.data.frame(matrix(nrow = 1500, ncol = 4))
colnames(data) <- c("ID", "treatment", "VFDs","death_time")
for(i in 1 : nrow(data)){
data[i, 1] <- i
data[i, 4] <- ceiling(runif(1, min = 0, max = 90))
data[i, 2] <- sample(treatment, 1, prob = c(0.5, 0.5), replace = TRUE)
if(data[i, 2] == "trt"){
data[i, 3] <- sample(VFDs, 1, prob = trt_diff_effect_prop)
}
else{
data[i, 3] <- sample(VFDs, 1, prob = ctl_prop)
}
}
trt_diff_effect_prop
VFDs <- c(seq(-1, 28, 1))[-30]
N <- c(115, 14, 2, 2, 7, 4, 2, 3, 2, 1, 2, 2, 3, 5, 3,
5, 5, 6, 6, 6, 5, 10, 11, 10, 8, 13, 25, 21, 17, 15)[-30]
#control group baseline proportion in each category
ctl_prop <- N/sum(N)
ctl_prop_cumsum <- cumsum(ctl_prop)
ctl_odds <- ctl_prop_cumsum/(1-ctl_prop_cumsum)
#treatment no effect
trt_odds <- OR_lib*ctl_odds
OR_mort = 0.75
OR_lib = 1
#this is generating multinomial probabilities for this data generation mechanism
multinomial_data_gen_diff_effect <- function(OR_mort, OR_lib){
VFDs <- c(seq(-1, 28, 1))[-30]
N <- c(115, 14, 2, 2, 7, 4, 2, 3, 2, 1, 2, 2, 3, 5, 3,
5, 5, 6, 6, 6, 5, 10, 11, 10, 8, 13, 25, 21, 17, 15)[-30]
#control group baseline proportion in each category
ctl_prop <- N/sum(N)
ctl_prop_cumsum <- cumsum(ctl_prop)
ctl_odds <- ctl_prop_cumsum/(1-ctl_prop_cumsum)
#treatment no effect
trt_odds <- OR_lib*ctl_odds
trt_prop_cumsum <- c((trt_odds/(1+trt_odds))[-29], 1)
trt_prop <- c(trt_prop_cumsum[1],diff(trt_prop_cumsum))
trt_prop <- trt_prop[-1] / sum(trt_prop[-1])
##############################################
#### trt imp lib worse mort       ############(follow improving both outcomes)
##############################################
trt_diff_effect_odds1 <- OR_mort * ctl_odds[1]
trt_diff_effect_prop1 <- trt_diff_effect_odds1/(1+trt_diff_effect_odds1)
trt_diff_effect_prop <- c(trt_diff_effect_prop1, trt_prop * (1 - trt_diff_effect_prop1))
#######################################################################
#####   Generating the patient matrix based on above ##################
#######################################################################
treatment <- c("trt", "ctl")
data <- as.data.frame(matrix(nrow = 1500, ncol = 4))
colnames(data) <- c("ID", "treatment", "VFDs","death_time")
for(i in 1 : nrow(data)){
data[i, 1] <- i
data[i, 4] <- ceiling(runif(1, min = 0, max = 90))
data[i, 2] <- sample(treatment, 1, prob = c(0.5, 0.5), replace = TRUE)
if(data[i, 2] == "trt"){
data[i, 3] <- sample(VFDs, 1, prob = trt_diff_effect_prop)
}
else{
data[i, 3] <- sample(VFDs, 1, prob = ctl_prop)
}
}
data <- data %>%
mutate(VFDs2 = case_when(VFDs == -1 ~ 1,
VFDs == 0 ~ 2,
VFDs >= 1 & VFDs <= 5 ~ 3,
VFDs >= 6 & VFDs <= 12 ~ 4,
VFDs >= 13 & VFDs <= 17 ~ 5,
VFDs >= 18 & VFDs <= 21 ~ 6,
VFDs >= 22 & VFDs <= 24 ~ 7,
VFDs == 25 ~ 8,
VFDs == 26 ~ 9,
VFDs == 27 ~ 10))
return(data)
}#OR = 1
data <- multinomial_data_gen_diff_effect(OR_mort, OR_lib)
#-------------third definition of ordinal outcome using INLA------------
lc <- inla.make.lincombs(treatmenttrt = -1)
result_OO3 <- inla(VFDs2 ~ treatment,
data = data,
family = "pom",
lincomb = lc,
control.fixed = list(mean= 0, prec= 0.1),
control.family = list(hyper = list(theta1 = list(param = 100))),
control.compute = list(dic = T, cpo = T, config = T),
verbose = F)
result_OO3 <- inla(VFDs2 ~ treatment,
data = data,
family = "pom",
lincomb = lc,
control.fixed = list(mean= 0, prec= 0.1),
control.family = list(hyper = list(theta1 = list(param = 100))),
control.compute = list(dic = T, cpo = T, config = T),
verbose = TRUE)
data
library(boot)
library(dplyr)
library(copula)
multinomial_data_gen_diff_effect <- function(OR_mort, OR_lib){
VFDs <- c(seq(-1, 28, 1))[-30]
N <- c(115, 14, 2, 2, 7, 4, 2, 3, 2, 1, 2, 2, 3, 5, 3, 5, 5, 6, 6, 6, 5, 10, 11, 10, 8, 13, 25, 21, 17, 15)[-30]
#control group baseline proportion in each category
ctl_prop <- N/sum(N)
ctl_prop_cumsum <- cumsum(ctl_prop)
ctl_odds <- ctl_prop_cumsum/(1-ctl_prop_cumsum)
#treatment no effect
trt_odds <- OR_lib*ctl_odds
trt_prop_cumsum <- c((trt_odds/(1+trt_odds))[-29], 1)
trt_prop <- c(trt_prop_cumsum[1],diff(trt_prop_cumsum))
trt_prop <- trt_prop[-1] / sum(trt_prop[-1])
##############################################
#### trt imp lib worse mort       ############(follow improving both outcomes)
##############################################
trt_diff_effect_odds1 <- OR_mort * ctl_odds[1]
trt_diff_effect_prop1 <- trt_diff_effect_odds1/(1+trt_diff_effect_odds1)
trt_diff_effect_prop <- c(trt_diff_effect_prop1, trt_prop * (1 - trt_diff_effect_prop1))
return(trt_diff_effect_prop)
}
multinomial_data_gen_same_effect <- function(OR){
VFDs <- c(seq(-1, 28, 1))[-30]
N <- c(115, 14, 2, 2, 7, 4, 2, 3, 2, 1, 2, 2, 3, 5, 3, 5, 5, 6,
6, 6, 5, 10, 11, 10, 8, 13, 25, 21, 17, 15)[-30]
#control group baseline proportion in each category
ctl_prop <- N/sum(N)
ctl_prop_cumsum <- cumsum(ctl_prop)
ctl_odds <- ctl_prop_cumsum/(1-ctl_prop_cumsum)
#treatment no effect
#OR <- 1
trt_odds <- OR*ctl_odds
trt_prop_cumsum <- c((trt_odds/(1+trt_odds))[-29], 1)
trt_prop <- c(trt_prop_cumsum[1],diff(trt_prop_cumsum))
return(trt_prop)
}
## NULL
null_d_multi <- multinomial_data_gen_same_effect(1)[1]
null_l_multi <- multinomial_data_gen_same_effect(1)[-1]%*%28:1 /
sum(multinomial_data_gen_same_effect(1)[-1])
null_l_sd_multi <- sqrt((multinomial_data_gen_same_effect(1)[-1]%*%(28:1)^2 /
sum(multinomial_data_gen_same_effect(1)[-1])) - null_l_multi^2)
## IMPROVE BOTH
imp_d_multi <- multinomial_data_gen_same_effect(0.75)[1]
imp_l_multi <- multinomial_data_gen_same_effect(0.75)[-1]%*%28:1 /
sum(multinomial_data_gen_same_effect(0.75)[-1])
imp_l_sd_multi <- sqrt((multinomial_data_gen_same_effect(0.75)[-1]%*%(28:1)^2 /
sum(multinomial_data_gen_same_effect(0.75)[-1])) -
imp_l_multi^2)
## WORSEN BOTH
wor_d_multi <- multinomial_data_gen_same_effect(1.25)[1]
wor_l_multi <- multinomial_data_gen_same_effect(1.25)[-1]%*%28:1 /
sum(multinomial_data_gen_same_effect(1.25)[-1])
wor_l_sd_multi <- sqrt((multinomial_data_gen_same_effect(1.25)[-1]%*%(28:1)^2 /
sum(multinomial_data_gen_same_effect(1.25)[-1])) -
wor_l_multi^2)
## IMPROVE MORT; WORSEN LIB
imp_d_wor_l_d_multi <- multinomial_data_gen_diff_effect(OR_mort = 0.75, OR_lib = 1.25)[1]
imp_d_wor_l_l_multi <- multinomial_data_gen_diff_effect(OR_mort = 0.75, OR_lib = 1.25)[-1]%*%28:1 /
sum(multinomial_data_gen_diff_effect(OR_mort = 0.75, OR_lib = 1.25)[-1])
imp_d_wor_l_l_multi_sd <- sqrt((multinomial_data_gen_diff_effect(OR_mort = 0.75, OR_lib = 1.25)[-1]%*%(28:1)^2 /
sum(multinomial_data_gen_diff_effect(OR_mort = 0.75, OR_lib = 1.25)[-1])) -
imp_d_wor_l_l_multi^2)
## IMPROVE LIB; WORSEN MORT
imp_l_wor_d_d_multi <- multinomial_data_gen_diff_effect(OR_mort = 1.25, OR_lib = 0.75)[1]
imp_l_wor_d_l_multi <- multinomial_data_gen_diff_effect(OR_mort = 1.25, OR_lib = 0.75)[-1]%*%28:1 /
sum(multinomial_data_gen_diff_effect(OR_mort = 1.25, OR_lib = 0.75)[-1])
imp_l_wor_d_l_multi_sd <- sqrt((multinomial_data_gen_diff_effect(OR_mort = 1.25, OR_lib = 0.75)[-1]%*%(28:1)^2 /
sum(multinomial_data_gen_diff_effect(OR_mort = 1.25, OR_lib = 0.75)[-1])) -
imp_l_wor_d_l_multi^2)
## IMPROVE MORT; NO LIB
imp_d_no_l_d_multi <- multinomial_data_gen_diff_effect(OR_mort = 0.75, OR_lib = 1)[1]
imp_d_no_l_l_multi <- multinomial_data_gen_diff_effect(OR_mort = 0.75, OR_lib = 1)[-1]%*%28:1 /
sum(multinomial_data_gen_diff_effect(OR_mort = 0.75, OR_lib = 1)[-1])
imp_d_no_l_l_multi_sd <- sqrt((multinomial_data_gen_diff_effect(OR_mort = 0.75, OR_lib = 1)[-1]%*%(28:1)^2 /
sum(multinomial_data_gen_diff_effect(OR_mort = 0.75, OR_lib = 1)[-1])) -
imp_d_no_l_l_multi^2)
## IMPROVE LIB; NO MORT
imp_l_no_d_d_multi <- multinomial_data_gen_diff_effect(OR_mort = 1, OR_lib = 0.75)[1]
imp_l_no_d_l_multi <- multinomial_data_gen_diff_effect(OR_mort = 1, OR_lib = 0.75)[-1]%*%28:1 /
sum(multinomial_data_gen_diff_effect(OR_mort = 1, OR_lib = 0.75)[-1])
imp_l_no_d_l_multi_sd <- sqrt((multinomial_data_gen_diff_effect(OR_mort = 1, OR_lib = 0.75)[-1]%*%(28:1)^2 /
sum(multinomial_data_gen_diff_effect(OR_mort = 1, OR_lib = 0.75)[-1])) -
imp_l_no_d_l_multi^2)
cbind(
c(null_d_multi, imp_d_multi, wor_d_multi, imp_d_wor_l_d_multi,
imp_l_wor_d_d_multi, imp_d_no_l_d_multi, imp_l_no_d_d_multi),
c(null_l_multi, imp_l_multi, wor_l_multi, imp_d_wor_l_l_multi,
imp_l_wor_d_l_multi, imp_d_no_l_l_multi, imp_l_no_d_l_multi),
c(null_l_sd_multi, imp_l_sd_multi, wor_l_sd_multi, imp_d_wor_l_l_multi_sd,
imp_l_wor_d_l_multi_sd, imp_d_no_l_l_multi_sd, imp_l_no_d_l_multi_sd))
library(tidyverse)
library(dplyr)
setwd("C:/Users/Anna Heath/OneDrive/OneDrive - SickKids/Admin Anna/Hiring and Staff/Ziming Chen 2022/PRACTICAL/SimulationMar20/Multinomial_AH/hurdle")
hurdle_noeffect <- read.csv("hurdle_noeffect.csv")
hurdle_imp_both <- read.csv("hurdle_imp_both.csv")
hurdle_imp_lib_worse_mort <- read.csv("hurdle_imp_lib_worse_mort.csv")
hurdle_imp_mort_worse_lib <- read.csv("hurdle_imp_mort_worse_lib.csv")
hurdle_worsen_both <- read.csv("hurdle_worsen_both.csv")
hurdle_imp_lib_no_mort <- read.csv("hurdle_imp_lib_no_mort.csv")
hurdle_imp_mort_no_lib <- read.csv("hurdle_imp_mort_no_lib.csv")
#-------calculating lambda that controls type one error----------
hurdle_noeffect <- hurdle_noeffect %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(hurdle_noeffect) %>%
filter(V1 != "Error") %>%
mutate(post_prob_death = as.numeric(V1),
post_prob_liberation = as.numeric(V2),
trt_death = as.numeric(V3),
trt_liberation = as.numeric(V4),
sd_death = as.numeric(V5),
sd_extubation = as.numeric(V6))
hurdle_noeffect <- hurdle_noeffect %>%
mutate(max_post = pmax(post_prob_death, post_prob_liberation))
hurdle_threshold <- hurdle_noeffect %>%
filter(post_prob_death >= 0.2 & post_prob_liberation >= 0.2) %>%
arrange(desc(max_post))
first_100 <- head(hurdle_threshold, nrow(hurdle_noeffect)*0.05)
#0.9666774
lambda_hurdle <- as.numeric(first_100[nrow(first_100),]$max_post)
lambda_hurdle <- 0.998
hurdle_noeffect_power <- hurdle_noeffect %>%
filter(post_prob_death >= 0.2 & post_prob_liberation >= 0.2) %>%
arrange(desc(max_post))
(hurdle_p_noeffect <- nrow(hurdle_noeffect_power[
hurdle_noeffect_power$max_post >= lambda_hurdle,])/
nrow(hurdle_noeffect))
#--------based on the lambda, calculating "power" for each scenario----------
################## worsening both ################################
hurdle_worsen_both <- hurdle_worsen_both %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(hurdle_worsen_both) %>%
filter(V1 != "Error") %>%
mutate(post_prob_death = as.numeric(V1),
post_prob_liberation = as.numeric(V2),
trt_death = as.numeric(V3),
trt_liberation = as.numeric(V4),
sd_death = as.numeric(V5),
sd_extubation = as.numeric(V6))
hurdle_worsen_both <- hurdle_worsen_both %>%
mutate(max_post = pmax(post_prob_death, post_prob_liberation))
hurdle_worsen_both_power <- hurdle_worsen_both %>%
filter(post_prob_death >= 0.2 & post_prob_liberation >= 0.2) %>%
arrange(desc(max_post))
(hurdle_post_p_worsen_both <- nrow(hurdle_worsen_both_power[hurdle_worsen_both_power$max_post >= lambda_hurdle,])/
nrow(hurdle_worsen_both))
################## improving both ################################
hurdle_imp_both <- hurdle_imp_both %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(hurdle_imp_both) %>%
filter(V1 != "Error") %>%
mutate(post_prob_death = as.numeric(V1),
post_prob_liberation = as.numeric(V2),
trt_death = as.numeric(V3),
trt_liberation = as.numeric(V4),
sd_death = as.numeric(V5),
sd_extubation = as.numeric(V6))
hurdle_imp_both <- hurdle_imp_both %>%
mutate(max_post = pmax(post_prob_death, post_prob_liberation))
hurdle_imp_both_power <- hurdle_imp_both %>%
filter(post_prob_death >= 0.2 & post_prob_liberation >= 0.2) %>%
arrange(desc(max_post))
(hurdle_post_p_imp_both <- nrow(hurdle_imp_both_power[hurdle_imp_both_power$max_post >= lambda_hurdle,])/nrow(hurdle_imp_both))
################## improving liberation worsening mortality ################################
hurdle_imp_lib_worse_mort <- hurdle_imp_lib_worse_mort %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(hurdle_imp_lib_worse_mort) %>%
filter(V1 != "Error") %>%
mutate(post_prob_death = as.numeric(V1),
post_prob_liberation = as.numeric(V2),
trt_death = as.numeric(V3),
trt_liberation = as.numeric(V4),
sd_death = as.numeric(V5),
sd_extubation = as.numeric(V6))
hurdle_imp_lib_worse_mort <- hurdle_imp_lib_worse_mort %>%
mutate(max_post = pmax(post_prob_death, post_prob_liberation))
hurdle_imp_lib_worse_mort_power <- hurdle_imp_lib_worse_mort %>%
filter(post_prob_death >= 0.2 & post_prob_liberation >= 0.2) %>%
arrange(desc(max_post))
(hurdle_post_p_imp_lib_worse_mort <- nrow(hurdle_imp_lib_worse_mort_power[hurdle_imp_lib_worse_mort_power$max_post >= lambda_hurdle,])/nrow(hurdle_imp_lib_worse_mort))
################## improving mortality worsening liberation ################################
hurdle_imp_mort_worse_lib <- hurdle_imp_mort_worse_lib %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(hurdle_imp_mort_worse_lib) %>%
filter(V1 != "Error") %>%
mutate(post_prob_death = as.numeric(V1),
post_prob_liberation = as.numeric(V2),
trt_death = as.numeric(V3),
trt_liberation = as.numeric(V4),
sd_death = as.numeric(V5),
sd_extubation = as.numeric(V6))
hurdle_imp_mort_worse_lib <- hurdle_imp_mort_worse_lib %>%
mutate(max_post = pmax(post_prob_death, post_prob_liberation))
hurdle_imp_mort_worse_lib_power <- hurdle_imp_mort_worse_lib %>%
filter(post_prob_death >= 0.2 & post_prob_liberation >= 0.2) %>%
arrange(desc(max_post))
(hurdle_post_p_imp_mort_worse_lib <- nrow(hurdle_imp_mort_worse_lib_power[hurdle_imp_mort_worse_lib_power$max_post >= lambda_hurdle,])/nrow(hurdle_imp_mort_worse_lib))
################## improving liberation noning mortality ################################
hurdle_imp_lib_no_mort <- hurdle_imp_lib_no_mort %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(hurdle_imp_lib_no_mort) %>%
filter(V1 != "Error") %>%
mutate(post_prob_death = as.numeric(V1),
post_prob_liberation = as.numeric(V2),
trt_death = as.numeric(V3),
trt_liberation = as.numeric(V4),
sd_death = as.numeric(V5),
sd_extubation = as.numeric(V6))
hurdle_imp_lib_no_mort <- hurdle_imp_lib_no_mort %>%
mutate(max_post = pmax(post_prob_death, post_prob_liberation))
hurdle_imp_lib_no_mort_power <- hurdle_imp_lib_no_mort %>%
filter(post_prob_death >= 0.2 & post_prob_liberation >= 0.2) %>%
arrange(desc(max_post))
(hurdle_post_p_imp_lib_no_mort <- nrow(hurdle_imp_lib_no_mort_power[hurdle_imp_lib_no_mort_power$max_post >= lambda_hurdle,])/nrow(hurdle_imp_lib_no_mort))
################## improving mortality noning liberation ################################
hurdle_imp_mort_no_lib <- hurdle_imp_mort_no_lib %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(hurdle_imp_mort_no_lib) %>%
filter(V1 != "Error") %>%
mutate(post_prob_death = as.numeric(V1),
post_prob_liberation = as.numeric(V2),
trt_death = as.numeric(V3),
trt_liberation = as.numeric(V4),
sd_death = as.numeric(V5),
sd_extubation = as.numeric(V6))
hurdle_imp_mort_no_lib <- hurdle_imp_mort_no_lib %>%
mutate(max_post = pmax(post_prob_death, post_prob_liberation))
hurdle_imp_mort_no_lib_power <- hurdle_imp_mort_no_lib %>%
filter(post_prob_death >= 0.2 & post_prob_liberation >= 0.2) %>%
arrange(desc(max_post))
(hurdle_post_p_imp_mort_no_lib <- nrow(hurdle_imp_mort_no_lib_power[hurdle_imp_mort_no_lib_power$max_post >= lambda_hurdle,])/nrow(hurdle_imp_mort_no_lib))
hurdle_1 <- data.frame(scenario = c("no_eff", "worsen_both", "imp_both", "worsen_mort_imp_lib", "worsen_lib_imp_mort", "imp_lib_no_mort", "imp_mort_no_lib"),
post_p = c(hurdle_p_noeffect, hurdle_post_p_worsen_both, hurdle_post_p_imp_both, hurdle_post_p_imp_lib_worse_mort, hurdle_post_p_imp_mort_worse_lib, hurdle_post_p_imp_lib_no_mort, hurdle_post_p_imp_mort_no_lib),
trt_death_est_mean = c(mean(hurdle_noeffect$trt_death), mean(hurdle_worsen_both$trt_death), mean(hurdle_imp_both$trt_death), mean(hurdle_imp_lib_worse_mort$trt_death), mean(hurdle_imp_mort_worse_lib$trt_death), mean(hurdle_imp_lib_no_mort$trt_death), mean(hurdle_imp_mort_no_lib$trt_death)),
trt_liberation_est_mean = c(mean(hurdle_noeffect$trt_liberation), mean(hurdle_worsen_both$trt_liberation), mean(hurdle_imp_both$trt_liberation), mean(hurdle_imp_lib_worse_mort$trt_liberation), mean(hurdle_imp_mort_worse_lib$trt_liberation), mean(hurdle_imp_lib_no_mort$trt_liberation), mean(hurdle_imp_mort_no_lib$trt_liberation)),
sd_death_est_mean = c(mean(hurdle_noeffect$sd_death), mean(hurdle_worsen_both$sd_death), mean(hurdle_imp_both$sd_death), mean(hurdle_imp_lib_worse_mort$sd_death), mean(hurdle_imp_mort_worse_lib$sd_death), mean(hurdle_imp_lib_no_mort$sd_death), mean(hurdle_imp_mort_no_lib$sd_death)),
sd_liberation_est_mean = c(mean(hurdle_noeffect$sd_extubation), mean(hurdle_worsen_both$sd_extubation), mean(hurdle_imp_both$sd_extubation), mean(hurdle_imp_lib_worse_mort$sd_extubation), mean(hurdle_imp_mort_worse_lib$sd_extubation), mean(hurdle_imp_lib_no_mort$sd_extubation), mean(hurdle_imp_mort_no_lib$sd_extubation)))
hurdle_1[, 1:2]
