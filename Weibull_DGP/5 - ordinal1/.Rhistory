imp_lib_worse_mort_summary,
imp_mort_worse_lib_summary,
no_effect_summary,
worsen_both_summary) -
rbind(no_effect_summary,
no_effect_summary,
no_effect_summary,
no_effect_summary,
no_effect_summary,
no_effect_summary,
no_effect_summary))/rbind(no_effect_summary,
no_effect_summary,
no_effect_summary,
no_effect_summary,
no_effect_summary,
no_effect_summary,
no_effect_summary)
multinomial_data_gen_diff_effect <- function(OR_mort, OR_lib){
VFDs <- c(seq(-1, 28, 1))[-30]
N <- c(115, 14, 2, 2, 7, 4, 2, 3, 2, 1, 2, 2, 3, 5, 3, 5, 5, 6, 6, 6, 5, 10, 11, 10, 8, 13, 25, 21, 17, 15)[-30]
#control group baseline proportion in each category
ctl_prop <- N/sum(N)
ctl_prop_cumsum <- cumsum(ctl_prop)
ctl_odds <- ctl_prop_cumsum/(1-ctl_prop_cumsum)
#treatment no effect
#OR <- 1
trt_odds <- OR_lib*ctl_odds
trt_prop_cumsum <- c((trt_odds/(1+trt_odds))[-29], 1)
trt_prop <- c(trt_prop_cumsum[1],diff(trt_prop_cumsum))
##############################################
#### trt imp lib worse mort       ############(follow improving both outcomes)
##############################################
trt_diff_effect_odds1 <- OR_mort * ctl_odds[1]
trt_diff_effect_prop1 <- trt_diff_effect_odds1/(1+trt_diff_effect_odds1)
trt_diff_effect_prop <- c(trt_diff_effect_prop1, trt_prop)[-2] /sum(c(trt_diff_effect_prop1, trt_prop)[-2])
#######################################################################
#####   Generating the patient matrix based on above ##################
#######################################################################
treatment <- c("trt", "ctl")
data <- as.data.frame(matrix(nrow = 1500, ncol = 3))
colnames(data) <- c("ID", "treatment", "VFDs")
for(i in 1 : nrow(data)){
data[i, 1] <- i
data[i, 2] <- sample(treatment, 1, prob = c(0.5, 0.5), replace = TRUE)
if(data[i, 2] == "trt"){
data[i, 3] <- sample(VFDs, 1, prob = trt_diff_effect_prop)
}
else{
data[i, 3] <- sample(VFDs, 1, prob = ctl_prop)
}
}
return(data)
}
multinomial_data_gen_same_effect <- function(OR){
VFDs <- c(seq(-1, 28, 1))[-30]
N <- c(115, 14, 2, 2, 7, 4, 2, 3, 2, 1, 2, 2, 3, 5, 3, 5, 5, 6, 6, 6, 5, 10, 11, 10, 8, 13, 25, 21, 17, 15)[-30]
#control group baseline proportion in each category
ctl_prop <- N/sum(N)
ctl_prop_cumsum <- cumsum(ctl_prop)
ctl_odds <- ctl_prop_cumsum/(1-ctl_prop_cumsum)
#treatment no effect
#OR <- 1
trt_odds <- OR*ctl_odds
trt_prop_cumsum <- c((trt_odds/(1+trt_odds))[-29], 1)
trt_prop <- c(trt_prop_cumsum[1],diff(trt_prop_cumsum))
#######################################################################
#####   Generating the patient matrix based on above ##################
#######################################################################
treatment <- c("trt", "ctl")
data <- as.data.frame(matrix(nrow = 1500, ncol = 3))
colnames(data) <- c("ID", "treatment", "VFDs")
for(i in 1 : nrow(data)){
data[i, 1] <- i
data[i, 2] <- sample(treatment, 1, prob = c(0.5, 0.5), replace = TRUE)
if(data[i, 2] == "trt"){
data[i, 3] <- sample(VFDs, 1, prob = trt_prop)
}
else{
data[i, 3] <- sample(VFDs, 1, prob = ctl_prop)
}
}
return(data)
}
multinomial_data_gen_same_effect(1)
multinomial_data_gen_same_effect(1) %>%
group_by(treatment, VFDs) %>%
summarise(count = n())
multinomial_data_gen_same_effect(1) %>%
group_by(treatment, VFDs) %>%
summarise(count = n()/1500)
multinomial_data_gen_same_effect <- function(OR){
VFDs <- c(seq(-1, 28, 1))[-30]
N <- c(115, 14, 2, 2, 7, 4, 2, 3, 2, 1, 2, 2, 3, 5, 3, 5, 5, 6,
6, 6, 5, 10, 11, 10, 8, 13, 25, 21, 17, 15)[-30]
#control group baseline proportion in each category
ctl_prop <- N/sum(N)
ctl_prop_cumsum <- cumsum(ctl_prop)
ctl_odds <- ctl_prop_cumsum/(1-ctl_prop_cumsum)
#treatment no effect
#OR <- 1
trt_odds <- OR*ctl_odds
trt_prop_cumsum <- c((trt_odds/(1+trt_odds))[-29], 1)
trt_prop <- c(trt_prop_cumsum[1],diff(trt_prop_cumsum))
return(trt_prop)
}
multinomial_data_gen_same_effect(1)
multinomial_data_gen_diff_effect <- function(OR_mort, OR_lib){
VFDs <- c(seq(-1, 28, 1))[-30]
N <- c(115, 14, 2, 2, 7, 4, 2, 3, 2, 1, 2, 2, 3, 5, 3, 5, 5, 6, 6, 6, 5, 10, 11, 10, 8, 13, 25, 21, 17, 15)[-30]
#control group baseline proportion in each category
ctl_prop <- N/sum(N)
ctl_prop_cumsum <- cumsum(ctl_prop)
ctl_odds <- ctl_prop_cumsum/(1-ctl_prop_cumsum)
#treatment no effect
#OR <- 1
trt_odds <- OR_lib*ctl_odds
trt_prop_cumsum <- c((trt_odds/(1+trt_odds))[-29], 1)
trt_prop <- c(trt_prop_cumsum[1],diff(trt_prop_cumsum))
##############################################
#### trt imp lib worse mort       ############(follow improving both outcomes)
##############################################
trt_diff_effect_odds1 <- OR_mort * ctl_odds[1]
trt_diff_effect_prop1 <- trt_diff_effect_odds1/(1+trt_diff_effect_odds1)
trt_diff_effect_prop <- c(trt_diff_effect_prop1, trt_prop)[-2] /sum(c(trt_diff_effect_prop1, trt_prop)[-2])
return(trt_diff_effect_prop)
}
multinomial_data_gen_same_effect(1.3)
multinomial_data_gen_same_effect(1.25)
multinomial_data_gen_same_effect(1.2)
multinomial_data_gen_same_effect(1)
multinomial_data_gen_same_effect(1.2)
multinomial_data_gen_same_effect(0.8)
multinomial_data_gen_diff_effect(1.2, 0.8)
multinomial_data_gen_diff_effect(0.8, 1.2)
multinomial_data_gen_diff_effect(1, 1.2)
multinomial_data_gen_diff_effect(1.2, 1)
multinomial_data_gen_same_effect(1/1.2)
multinomial_data_gen_same_effect(0.8)
OR_mort
#############################################################
library(tidyverse)
library(dplyr)
library(boot)
library(doParallel)
library(foreach)
#this is generating multinomial probabilities for this data generation mechanism
multinomial_data_gen_diff_effect <- function(OR_mort, OR_lib){
VFDs <- c(seq(-1, 28, 1))[-30]
N <- c(115, 14, 2, 2, 7, 4, 2, 3, 2, 1, 2, 2, 3, 5, 3, 5, 5, 6, 6, 6, 5, 10, 11, 10, 8, 13, 25, 21, 17, 15)[-30]
#control group baseline proportion in each category
ctl_prop <- N/sum(N)
ctl_prop_cumsum <- cumsum(ctl_prop)
ctl_odds <- ctl_prop_cumsum/(1-ctl_prop_cumsum)
#treatment no effect
#OR <- 1
trt_odds <- OR_lib*ctl_odds
trt_prop_cumsum <- c((trt_odds/(1+trt_odds))[-29], 1)
trt_prop <- c(trt_prop_cumsum[1],diff(trt_prop_cumsum))
##############################################
#### trt imp lib worse mort       ############(follow improving both outcomes)
##############################################
trt_diff_effect_odds1 <- OR_mort * ctl_odds[1]
trt_diff_effect_prop1 <- trt_diff_effect_odds1/(1+trt_diff_effect_odds1)
trt_diff_effect_prop <- c(trt_diff_effect_prop1, trt_prop)[-2] /sum(c(trt_diff_effect_prop1, trt_prop)[-2])
#######################################################################
#####   Generating the patient matrix based on above ##################
#######################################################################
treatment <- c("trt", "ctl")
data <- as.data.frame(matrix(nrow = 1500, ncol = 3))
colnames(data) <- c("ID", "treatment", "VFDs")
for(i in 1 : nrow(data)){
data[i, 1] <- i
data[i, 2] <- sample(treatment, 1, prob = c(0.5, 0.5), replace = TRUE)
if(data[i, 2] == "trt"){
data[i, 3] <- sample(VFDs, 1, prob = trt_diff_effect_prop)
}
else{
data[i, 3] <- sample(VFDs, 1, prob = ctl_prop)
}
}
return(data)
}
#OR = 1
ttest_single_sim <- function(OR_mort, OR_lib){
data <- multinomial_data_gen_diff_effect(OR_mort, OR_lib)
data <- data %>%
mutate(VFDs = VFDs + 1)
data <- data %>%
mutate(treatment = as.factor(ifelse(treatment == "trt", 1, 0)))
#####################################################
#####    Analysis               #####################
#####################################################
tryCatch({
#-------------third definition of ordinal outcome using INLA------------
t_test <- t.test(VFDs ~ treatment, data = data, alternative = "less")
###################################################
###        p values                        ########
###################################################
p_val <- t_test$p.value
###################################################
###      treatment effect mean difference  ########
###################################################
#mean in treatment group - mean in control group
trt_effect <- as.numeric(t_test$estimate[2] - t_test$estimate[1])
###################################################
###        treatment effect yes or no      ########
###################################################
trt_effect_YN <- ifelse(p_val < 0.05, "Yes", "No")
return(c(trt_effect_YN,
p_val,
trt_effect))
},
error = function(e){
print("Error")
trt_effect_YN <- "Error"
p_val <- "Error"
trt_effect <- "Error"
return(c(trt_effect_YN,
p_val,
trt_effect))
}
)
}
multinomial_data_gen_same_effect(1)
multinomial_data_gen_same_effect(1.3)
## IMPROVE BOTH
multinomial_data_gen_same_effect(0.7)
multinomial_data_gen_diff_effect(OR_mort = 0.7, OR_lib = 1.3)
multinomial_data_gen_diff_effect <- function(OR_mort, OR_lib){
VFDs <- c(seq(-1, 28, 1))[-30]
N <- c(115, 14, 2, 2, 7, 4, 2, 3, 2, 1, 2, 2, 3, 5, 3, 5, 5, 6, 6, 6, 5, 10, 11, 10, 8, 13, 25, 21, 17, 15)[-30]
#control group baseline proportion in each category
ctl_prop <- N/sum(N)
ctl_prop_cumsum <- cumsum(ctl_prop)
ctl_odds <- ctl_prop_cumsum/(1-ctl_prop_cumsum)
#treatment no effect
#OR <- 1
trt_odds <- OR_lib*ctl_odds
trt_prop_cumsum <- c((trt_odds/(1+trt_odds))[-29], 1)
trt_prop <- c(trt_prop_cumsum[1],diff(trt_prop_cumsum))
##############################################
#### trt imp lib worse mort       ############(follow improving both outcomes)
##############################################
trt_diff_effect_odds1 <- OR_mort * ctl_odds[1]
trt_diff_effect_prop1 <- trt_diff_effect_odds1/(1+trt_diff_effect_odds1)
trt_diff_effect_prop <- c(trt_diff_effect_prop1, trt_prop)[-2] /sum(c(trt_diff_effect_prop1, trt_prop)[-2])
return(trt_diff_effect_prop)
}
multinomial_data_gen_same_effect <- function(OR){
VFDs <- c(seq(-1, 28, 1))[-30]
N <- c(115, 14, 2, 2, 7, 4, 2, 3, 2, 1, 2, 2, 3, 5, 3, 5, 5, 6,
6, 6, 5, 10, 11, 10, 8, 13, 25, 21, 17, 15)[-30]
#control group baseline proportion in each category
ctl_prop <- N/sum(N)
ctl_prop_cumsum <- cumsum(ctl_prop)
ctl_odds <- ctl_prop_cumsum/(1-ctl_prop_cumsum)
#treatment no effect
#OR <- 1
trt_odds <- OR*ctl_odds
trt_prop_cumsum <- c((trt_odds/(1+trt_odds))[-29], 1)
trt_prop <- c(trt_prop_cumsum[1],diff(trt_prop_cumsum))
return(trt_prop)
}
multinomial_data_gen_diff_effect(OR_mort = 0.7, OR_lib = 1.3)
## NULL
multinomial_data_gen_same_effect(1)
## IMPROVE MORT; WORSEN LIB
multinomial_data_gen_diff_effect(OR_mort = 0.7, OR_lib = 1.3)
## IMPROVE LIB; WORSEN MORT
multinomial_data_gen_diff_effect(OR_mort = 1.3, OR_lib = 0.7)
## IMPROVE LIB; NO MORT
multinomial_data_gen_diff_effect(OR_mort = 1, OR_lib = 0.7)
## IMPROVE MORT; NO LIB
multinomial_data_gen_diff_effect(OR_mort = 0.7, OR_lib = 1)
## NULL
multinomial_data_gen_same_effect(1)[1]
multinomial_data_gen_same_effect(1)[-1]%*%1:27
multinomial_data_gen_same_effect(1)[-1]
multinomial_data_gen_same_effect(1)[-1]%*%t(1:27)
t(multinomial_data_gen_same_effect(1)[-1])%*%1:27
t(multinomial_data_gen_same_effect(1)[-1])
t(t(multinomial_data_gen_same_effect(1)[-1])(%*%1:27
t(t(multinomial_data_gen_same_effect(1)[-1]))%*%1:27
t(t(multinomial_data_gen_same_effect(1)[-1]))
t(multinomial_data_gen_same_effect(1)[-1])%*%t(1:27)
t(multinomial_data_gen_same_effect(1)[-1])%*%t(t(1:27))
multinomial_data_gen_same_effect(1)[-1]
multinomial_data_gen_same_effect(1)[-1]*0:27
sum(multinomial_data_gen_same_effect(1)[-1]*0:27)
multinomial_data_gen_same_effect(1)[-1]%*%0:27
## NULL
multinomial_data_gen_same_effect(1)[1]
multinomial_data_gen_same_effect(1)[-1]%*%0:27
## IMPROVE BOTH
multinomial_data_gen_same_effect(0.7)[1]
multinomial_data_gen_same_effect(0.7)[-1]%*%0:27
## NULL
multinomial_data_gen_same_effect(1)[1]
multinomial_data_gen_same_effect(1)[-1]%*%27:0
## IMPROVE BOTH
multinomial_data_gen_same_effect(0.7)[1]
multinomial_data_gen_same_effect(0.7)[-1]%*%27:0
multinomial_data_gen_same_effect(1)[-1]%*%28:1
multinomial_data_gen_same_effect(0.7)[-1]%*%28:1
## IMPROVE BOTH
multinomial_data_gen_same_effect(0.7)[1]
multinomial_data_gen_same_effect(0.7)[-1]%*%28:1
## WORSEN BOTH
multinomial_data_gen_same_effect(1.3)[1]
multinomial_data_gen_same_effect(1.3)[-1]%*%28:1
## IMPROVE MORT; WORSEN LIB
multinomial_data_gen_diff_effect(OR_mort = 0.7, OR_lib = 1.3)[1]
multinomial_data_gen_diff_effect(OR_mort = 0.7, OR_lib = 1.3)[-1]%*%0:27
multinomial_data_gen_diff_effect(OR_mort = 0.7, OR_lib = 1.3)[-1]%*%28:1
## IMPROVE LIB; WORSEN MORT
multinomial_data_gen_diff_effect(OR_mort = 1.3, OR_lib = 0.7)[1]
multinomial_data_gen_diff_effect(OR_mort = 1.3, OR_lib = 0.7)[-1]%*%28:1
## IMPROVE MORT; NO LIB
multinomial_data_gen_diff_effect(OR_mort = 0.7, OR_lib = 1)[1]
multinomial_data_gen_diff_effect(OR_mort = 0.7, OR_lib = 1)[-1]%*%28:1
## IMPROVE LIB; NO MORT
multinomial_data_gen_diff_effect(OR_mort = 1, OR_lib = 0.7)[1]
multinomial_data_gen_diff_effect(OR_mort = 1, OR_lib = 0.7)[-1]%*%28:1
multinomial_data_gen_diff_effect
VFDs <- c(seq(-1, 28, 1))[-30]
N <- c(115, 14, 2, 2, 7, 4, 2, 3, 2, 1, 2, 2, 3, 5, 3, 5, 5, 6, 6, 6, 5, 10, 11, 10, 8, 13, 25, 21, 17, 15)[-30]
N
#control group baseline proportion in each category
ctl_prop <- N/sum(N)
ctl_prop
ctl_prop_cumsum <- cumsum(ctl_prop)
ctl_prop_cumsum
#treatment no effect
#OR <- 1
trt_odds <- OR_lib*ctl_odds
ctl_prop <- N/sum(N)
ctl_prop_cumsum <- cumsum(ctl_prop)
ctl_odds <- ctl_prop_cumsum/(1-ctl_prop_cumsum)
ctl_odds
OR_lib = 0.7
#control group baseline proportion in each category
ctl_prop <- N/sum(N)
ctl_prop_cumsum <- cumsum(ctl_prop)
ctl_odds <- ctl_prop_cumsum/(1-ctl_prop_cumsum)
#treatment no effect
#OR <- 1
trt_odds <- OR_lib*ctl_odds
trt_prop_cumsum <- c((trt_odds/(1+trt_odds))[-29], 1)
trt_prop <- c(trt_prop_cumsum[1],diff(trt_prop_cumsum))
trt_odds
trt_prop_cumsum
OR_mort <- 1
trt_diff_effect_odds1 <- OR_mort * ctl_odds[1]
trt_diff_effect_odds1
ctl_odds[1]
trt_diff_effect_prop1 <- trt_diff_effect_odds1/(1+trt_diff_effect_odds1)
trt_diff_effect_prop1
c(trt_diff_effect_prop1, trt_prop)
sum(c(trt_diff_effect_prop1, trt_prop)
[-2])
library(boot)
library(dplyr)
library(INLA)
library(doParallel)
library(foreach)
library(tidyverse)
library(copula)
library(dplyr)
setwd("C:/Users/Anna Heath/OneDrive/OneDrive - SickKids/Admin Anna/Hiring and Staff/Ziming Chen 2022/PRACTICAL/plot_data")
imp_both <- read.csv("imp_both.csv")
imp_lib_no_mort <- read.csv("imp_lib_no_mort.csv")
imp_mort_no_lib <- read.csv("imp_mort_no_lib.csv")
imp_lib_worse_mort <- read.csv("imp_lib_worse_mort.csv")
imp_mort_worse_lib <- read.csv("imp_mort_worse_lib.csv")
no_effect <- read.csv("no_effect.csv")
worsen_both <- read.csv("worsen_both.csv")
imp_both_summary <- imp_both %>%
summarise(across(where(is.numeric), mean))
rownames(imp_both_summary) <- "Improve Both"
imp_lib_no_mort_summary <- imp_lib_no_mort %>%
summarise(across(where(is.numeric), mean))
rownames(imp_lib_no_mort_summary) <- "imp_lib_no_mort"
imp_mort_no_lib_summary <- imp_mort_no_lib %>%
summarise(across(where(is.numeric), mean))
rownames(imp_mort_no_lib_summary) <- "imp_mort_no_lib"
imp_lib_worse_mort_summary <- imp_lib_worse_mort %>%
summarise(across(where(is.numeric), mean))
rownames(imp_lib_worse_mort_summary) <- "imp_lib_worse_mort"
imp_mort_worse_lib_summary <- imp_mort_worse_lib %>%
summarise(across(where(is.numeric), mean))
rownames(imp_mort_worse_lib_summary) <- "imp_mort_worse_lib"
no_effect_summary <- no_effect %>%
summarise(across(where(is.numeric), mean))
rownames(no_effect_summary) <- "no_effect"
worsen_both_summary <- worsen_both %>%
summarise(across(where(is.numeric), mean))
rownames(worsen_both_summary) <- "worsen_both"
rbind(imp_both_summary,
imp_lib_no_mort_summary,
imp_mort_no_lib_summary,
imp_lib_worse_mort_summary,
imp_mort_worse_lib_summary,
no_effect_summary,
worsen_both_summary)
(rbind(imp_both_summary,
imp_lib_no_mort_summary,
imp_mort_no_lib_summary,
imp_lib_worse_mort_summary,
imp_mort_worse_lib_summary,
no_effect_summary,
worsen_both_summary) -
rbind(no_effect_summary,
no_effect_summary,
no_effect_summary,
no_effect_summary,
no_effect_summary,
no_effect_summary,
no_effect_summary))/rbind(no_effect_summary,
no_effect_summary,
no_effect_summary,
no_effect_summary,
no_effect_summary,
no_effect_summary,
no_effect_summary)
setwd("C:/Users/Anna Heath/OneDrive/OneDrive - SickKids/Admin Anna/Hiring and Staff/Ziming Chen 2022/PRACTICAL/SimulationMar20/Weibull/ordinal1")
Ordinal1_noeffect <- read.csv("Practical_ordinal1_noeffect.csv")
Ordinal1_imp_both <- read.csv("Practical_ordinal1_imp_both.csv")
Ordinal1_imp_lib_worse_mort <- read.csv("Practical_ordinal1_imp_lib_worse_mort.csv")
Ordinal1_imp_mort_worse_lib <- read.csv("Practical_ordinal1_imp_mort_worse_lib.csv")
Ordinal1_worsen_both <- read.csv("Practical_ordinal1_worsen_both.csv")
Ordinal1_imp_lib_no_mort <- read.csv("Practical_ordinal1_imp_lib_no_mort.csv")
Ordinal1_imp_mort_no_lib <- read.csv("Practical_ordinal1_imp_mort_no_lib.csv")
#-------calculating lambda that controls type one error----------
hist(as.numeric(Ordinal1_imp_both$post_p))
Ordinal1_noeffect
Ordinal1_noeffect <- read.csv("Practical_ordinal1_noeffect.csv")
Ordinal1_imp_both <- read.csv("Practical_ordinal1_imp_both.csv")
Ordinal1_imp_lib_worse_mort <- read.csv("Practical_ordinal1_imp_lib_worse_mort.csv")
Ordinal1_imp_mort_worse_lib <- read.csv("Practical_ordinal1_imp_mort_worse_lib.csv")
Ordinal1_worsen_both <- read.csv("Practical_ordinal1_worsen_both.csv")
Ordinal1_imp_lib_no_mort <- read.csv("Practical_ordinal1_imp_lib_no_mort.csv")
Ordinal1_imp_mort_no_lib <- read.csv("Practical_ordinal1_imp_mort_no_lib.csv")
Ordinal1_noeffect
head(Ordinal1_noeffect)
Ordinal1_noeffect <- na.omit(Ordinal1_noeffect) %>%
filter(V1 != "Error")
Ordinal1_noeffect <- Ordinal1_noeffect %>%
mutate(X = seq(1, nrow(Ordinal1_noeffect), 1)) %>%
rename(post_p = V1,
trt_effect = V2,
sd = V3)
Ordinal1_noeffect <- Ordinal1_noeffect %>%
arrange(desc(post_p))
#-------calculating lambda that controls type one error----------
hist(as.numeric(Ordinal1_imp_both$post_p))
#0.9605856
(lambda_Ordinal1 <- quantile(as.numeric(Ordinal1_noeffect$post_p), probs = c(0.95)))
(Ordinal1_post_p_noeffect <- nrow(Ordinal1_noeffect[Ordinal1_noeffect$post_p > lambda_Ordinal1,])/nrow(Ordinal1_noeffect))
#--------based on the lambda, calculating "power" for each scenario----------
Ordinal1_worsen_both <- na.omit(Ordinal1_worsen_both) %>%
filter(V1 != "Error")
Ordinal1_worsen_both <- Ordinal1_worsen_both %>%
mutate(X = seq(1, nrow(Ordinal1_worsen_both), 1)) %>%
rename(post_p = V1,
trt_effect = V2,
sd = V3)
(Ordinal1_post_p_worsen_both <- nrow(Ordinal1_worsen_both[Ordinal1_worsen_both$post_p > lambda_Ordinal1,])/nrow(Ordinal1_worsen_both))
Ordinal1_imp_both <- na.omit(Ordinal1_imp_both) %>%
filter(V1 != "Error")
Ordinal1_imp_both <- Ordinal1_imp_both %>%
mutate(X = seq(1, nrow(Ordinal1_imp_both), 1)) %>%
rename(post_p = V1,
trt_effect = V2,
sd = V3)
(Ordinal1_post_p_imp_both <- nrow(Ordinal1_imp_both[Ordinal1_imp_both$post_p > lambda_Ordinal1,])/nrow(Ordinal1_imp_both))
Ordinal1_imp_lib_worse_mort <- na.omit(Ordinal1_imp_lib_worse_mort) %>%
filter(V1 != "Error")
Ordinal1_imp_lib_worse_mort <- Ordinal1_imp_lib_worse_mort %>%
mutate(X = seq(1, nrow(Ordinal1_imp_lib_worse_mort), 1)) %>%
rename(post_p = V1,
trt_effect = V2,
sd = V3)
(Ordinal1_post_imp_lib_worse_mort <- nrow(Ordinal1_imp_lib_worse_mort[Ordinal1_imp_lib_worse_mort$post_p > lambda_Ordinal1,])/nrow(Ordinal1_imp_lib_worse_mort))
Ordinal1_imp_mort_worse_lib <- na.omit(Ordinal1_imp_mort_worse_lib) %>%
filter(V1 != "Error")
Ordinal1_imp_mort_worse_lib <- Ordinal1_imp_mort_worse_lib %>%
mutate(X = seq(1, nrow(Ordinal1_imp_mort_worse_lib), 1)) %>%
rename(post_p = V1,
trt_effect = V2,
sd = V3)
(Ordinal1_post_imp_mort_worse_lib <- nrow(Ordinal1_imp_mort_worse_lib[Ordinal1_imp_mort_worse_lib$post_p > lambda_Ordinal1,])/nrow(Ordinal1_imp_mort_worse_lib))
Ordinal1_imp_lib_no_mort <- na.omit(Ordinal1_imp_lib_no_mort) %>%
filter(V1 != "Error")
Ordinal1_imp_lib_no_mort <- Ordinal1_imp_lib_no_mort %>%
mutate(X = seq(1, nrow(Ordinal1_imp_lib_no_mort), 1)) %>%
rename(post_p = V1,
trt_effect = V2,
sd = V3)
(Ordinal1_post_imp_lib_no_mort <- nrow(Ordinal1_imp_lib_no_mort[Ordinal1_imp_lib_no_mort$post_p > lambda_Ordinal1,])/nrow(Ordinal1_imp_lib_no_mort))
Ordinal1_imp_mort_no_lib <- na.omit(Ordinal1_imp_mort_no_lib) %>%
filter(V1 != "Error")
Ordinal1_imp_mort_no_lib <- Ordinal1_imp_mort_no_lib %>%
mutate(X = seq(1, nrow(Ordinal1_imp_mort_no_lib), 1)) %>%
rename(post_p = V1,
trt_effect = V2,
sd = V3)
(Ordinal1_post_imp_mort_no_lib <- nrow(Ordinal1_imp_mort_no_lib[Ordinal1_imp_mort_no_lib$post_p > lambda_Ordinal1,])/nrow(Ordinal1_imp_mort_no_lib))
Ordinal1_1 <- data.frame(scenario = c("no_eff", "worsen_both", "imp_both", "worsen_mort_imp_lib", "worsen_lib_imp_mort", "imp_lib_no_mort", "imp_mort_no_lib"),
post_p = c(0.05, Ordinal1_post_p_worsen_both, Ordinal1_post_p_imp_both, Ordinal1_post_imp_lib_worse_mort, Ordinal1_post_imp_mort_worse_lib, Ordinal1_post_imp_lib_no_mort, Ordinal1_post_imp_mort_no_lib),
trt_est_mean = c(mean(as.numeric(Ordinal1_noeffect$trt_effect)), mean(as.numeric(Ordinal1_worsen_both$trt_effect)), mean(as.numeric(Ordinal1_imp_both$trt_effect)), mean(as.numeric(Ordinal1_imp_lib_worse_mort$trt_effect)), mean(as.numeric(Ordinal1_imp_mort_worse_lib$trt_effect)), mean(as.numeric(Ordinal1_imp_lib_worse_mort$trt_effect)), mean(as.numeric(Ordinal1_imp_mort_worse_lib$trt_effect))),
sd_est_mean = c(mean(as.numeric(Ordinal1_noeffect$sd)), mean(as.numeric(Ordinal1_worsen_both$sd)), mean(as.numeric(Ordinal1_imp_both$sd)), mean(as.numeric(Ordinal1_imp_lib_worse_mort$sd)), mean(as.numeric(Ordinal1_imp_mort_worse_lib$sd)), mean(as.numeric(Ordinal1_imp_lib_worse_mort$sd)), mean(as.numeric(Ordinal1_imp_mort_worse_lib$sd))))
Ordinal1_1
