intervention_D = cumsum(intervention_rand == 2)) %>%
mutate(blockcheck = (control == intervention_L) & (control == intervention_D)) %>%
filter(blockcheck) %>%
rowwise() %>%
mutate(totalrecruit = sum(control, intervention_L, intervention_D)) %>%
mutate(blockno = totalrecruit / 12)
flag_2[i] <- sum(!((1:200) %in% (x$totalrecruit / 12)))
}
flag_2
rand_list %>%
filter(redcap_data_access_group == site_no[i],
pt_state_rand == 2)
site_no
site_no %in% site_LDPVS
site_no <- site_no[!(site_no %in% site_LDPVS)]
flag_1 <- vector("numeric", length = length(site_LDPVS))
flag_1 <- vector("numeric", length = length(site_LDPVS))
for(i in 1:length(site_LDPVS)){
x <- rand_list %>%
filter(redcap_data_access_group == site_no[i],
pt_state_rand == 1) %>%
mutate(control = cumsum(intervention_rand == 3),
intervention_L = cumsum(intervention_rand == 1),
intervention_D = cumsum(intervention_rand == 2)) %>%
mutate(blockcheck = (control == intervention_L) & (control == intervention_D)) %>%
filter(blockcheck) %>%
rowwise() %>%
mutate(totalrecruit = sum(control, intervention_L, intervention_D)) %>%
mutate(blockno = totalrecruit / 12)
flag_1[i] <- sum(!((1:200) %in% (x$totalrecruit / 12)))
}
flag_1
flag_1
flag_1 <- vector("numeric", length = length(site_LDPVS))
for(i in 1:length(site_LDPVS)){
x <- rand_list %>%
filter(redcap_data_access_group == site_LDPVS[i],
pt_state_rand == 1) %>%
mutate(control = cumsum(intervention_rand == 3),
intervention_L = cumsum(intervention_rand == 1),
intervention_D = cumsum(intervention_rand == 2)) %>%
mutate(blockcheck = (control == intervention_L) & (control == intervention_D)) %>%
filter(blockcheck) %>%
rowwise() %>%
mutate(totalrecruit = sum(control, intervention_L, intervention_D)) %>%
mutate(blockno = totalrecruit / 12)
flag_1[i] <- sum(!((1:200) %in% (x$totalrecruit / 12)))
}
flag_1
## Even throughout - block sizes working.
site_no <- unique(rand_list$redcap_data_access_group)
site_no <- site_no[!(site_no %in% site_LDPVS)]
flag_1 <- vector("numeric", length = length(site_no))
i <- 1
x <- rand_list %>%
filter(redcap_data_access_group == site_no[i],
pt_state_rand == 1)
x
site_no <- unique(rand_list$redcap_data_access_group)
site_no <- site_no[!(site_no %in% site_LDPVS)]
flag_1 <- vector("numeric", length = length(site_no))
for(i in 1:length(site_no)){
x <- rand_list %>%
filter(redcap_data_access_group == site_no[i],
pt_state_rand == 1) %>%
mutate(control = cumsum(intervention_rand == 3),
intervention_L = cumsum(intervention_rand == 1)) %>%
mutate(blockcheck = (control == intervention_L)) %>%
filter(blockcheck) %>%
rowwise() %>%
mutate(totalrecruit = sum(control, intervention_L, intervention_D)) %>%
mutate(blockno = totalrecruit / 12)
flag_1[i] <- sum(!((1:200) %in% (x$totalrecruit / 12)))
}
site_no <- unique(rand_list$redcap_data_access_group)
site_no <- site_no[!(site_no %in% site_LDPVS)]
flag_1 <- vector("numeric", length = length(site_no))
for(i in 1:length(site_no)){
x <- rand_list %>%
filter(redcap_data_access_group == site_no[i],
pt_state_rand == 1) %>%
mutate(control = cumsum(intervention_rand == 3),
intervention_L = cumsum(intervention_rand == 1)) %>%
mutate(blockcheck = (control == intervention_L)) %>%
filter(blockcheck) %>%
rowwise() %>%
mutate(totalrecruit = sum(control, intervention_L)) %>%
mutate(blockno = totalrecruit / 12)
flag_1[i] <- sum(!((1:200) %in% (x$totalrecruit / 12)))
}
flag_1
flag_2 <- vector("numeric", length = length(site_no))
for(i in 1:length(site_no)){
x <- rand_list %>%
filter(redcap_data_access_group == site_no[i],
pt_state_rand == 2) %>%
mutate(control = cumsum(intervention_rand == 3),
intervention_L = cumsum(intervention_rand == 1)) %>%
mutate(blockcheck = (control == intervention_L)) %>%
filter(blockcheck) %>%
rowwise() %>%
mutate(totalrecruit = sum(control, intervention_L)) %>%
mutate(blockno = totalrecruit / 12)
flag_2[i] <- sum(!((1:200) %in% (x$totalrecruit / 12)))
}
flag_2
flag_2_LDPVS <- vector("numeric", length = length(site_LDPVS))
for(i in 1:length(site_LDPVS)){
x <- rand_list %>%
filter(redcap_data_access_group == site_LDPVS[i],
pt_state_rand == 2) %>%
mutate(control = cumsum(intervention_rand == 3),
intervention_L = cumsum(intervention_rand == 1),
intervention_D = cumsum(intervention_rand == 2)) %>%
mutate(blockcheck = (control == intervention_L) & (control == intervention_D)) %>%
filter(blockcheck) %>%
rowwise() %>%
mutate(totalrecruit = sum(control, intervention_L, intervention_D)) %>%
mutate(blockno = totalrecruit / 12)
flag_2_LDPVS[i] <- sum(!((1:200) %in% (x$totalrecruit / 12)))
}
flag_2_LDPVS
flag_3_LDPVS <- vector("numeric", length = length(site_LDPVS))
for(i in 1:length(site_LDPVS)){
x <- rand_list %>%
filter(redcap_data_access_group == site_LDPVS[i],
pt_state_rand == 3) %>%
mutate(control = cumsum(intervention_rand == 3),
intervention_L = cumsum(intervention_rand == 1),
intervention_D = cumsum(intervention_rand == 2)) %>%
mutate(blockcheck = (control == intervention_L) & (control == intervention_D)) %>%
filter(blockcheck) %>%
rowwise() %>%
mutate(totalrecruit = sum(control, intervention_L, intervention_D)) %>%
mutate(blockno = totalrecruit / 12)
flag_3_LDPVS[i] <- sum(!((1:200) %in% (x$totalrecruit / 12)))
}
flag_3_LDPVS
flag_2_LDPVS
flag_3_LDPVS
x <- rand_list %>%
filter(redcap_data_access_group == site_LDPVS[i],
pt_state_rand == 3) %>%
mutate(control = cumsum(intervention_rand == 3),
intervention_L = cumsum(intervention_rand == 1),
intervention_D = cumsum(intervention_rand == 2)) %>%
mutate(blockcheck = (control == intervention_L) & (control == intervention_D)) %>%
filter(blockcheck) %>%
rowwise() %>%
mutate(totalrecruit = sum(control, intervention_L, intervention_D)) %>%
mutate(blockno = totalrecruit / 12)
x
x <- rand_list %>%
filter(redcap_data_access_group == site_LDPVS[i],
pt_state_rand == 3)
x
flag_3_LDPVS <- vector("numeric", length = length(site_LDPVS))
for(i in 1:length(site_LDPVS)){
x <- rand_list %>%
filter(redcap_data_access_group == site_LDPVS[i],
pt_state_rand == 3) %>%
mutate(control = cumsum(intervention_rand == 3),
intervention_L = cumsum(intervention_rand == 2)) %>%
mutate(blockcheck = (control == intervention_L)) %>%
filter(blockcheck) %>%
rowwise() %>%
mutate(totalrecruit = sum(control, intervention_L)) %>%
mutate(blockno = totalrecruit / 12)
flag_3_LDPVS[i] <- sum(!((1:200) %in% (x$totalrecruit / 12)))
}
flag_3_LDPVS
flag_2_LDPVS <- vector("numeric", length = length(site_LDPVS))
for(i in 1:length(site_LDPVS)){
x <- rand_list %>%
filter(redcap_data_access_group == site_LDPVS[i],
pt_state_rand == 2) %>%
mutate(control = cumsum(intervention_rand == 3),
intervention_D = cumsum(intervention_rand == 1),
intervention_L = cumsum(intervention_rand == 2)) %>%
mutate(blockcheck = (control == intervention_D) & (control == intervention_L)) %>%
filter(blockcheck) %>%
rowwise() %>%
mutate(totalrecruit = sum(control, intervention_L, intervention_D)) %>%
mutate(blockno = totalrecruit / 12)
flag_2_LDPVS[i] <- sum(!((1:200) %in% (x$totalrecruit / 12)))
}
flag_2_LDPVS
flag_2 <- vector("numeric", length = length(site_no))
for(i in 1:length(site_no)){
x <- rand_list %>%
filter(redcap_data_access_group == site_no[i],
pt_state_rand == 2) %>%
mutate(control = cumsum(intervention_rand == 3),
intervention_D = cumsum(intervention_rand == 1)) %>%
mutate(blockcheck = (control == intervention_D)) %>%
filter(blockcheck) %>%
rowwise() %>%
mutate(totalrecruit = sum(control, intervention_D)) %>%
mutate(blockno = totalrecruit / 12)
flag_2[i] <- sum(!((1:200) %in% (x$totalrecruit / 12)))
}
flag_2
flag_1_LDPVS <- vector("numeric", length = length(site_LDPVS))
for(i in 1:length(site_LDPVS)){
x <- rand_list %>%
filter(redcap_data_access_group == site_LDPVS[i],
pt_state_rand == 1) %>%
mutate(control = cumsum(intervention_rand == 3),
intervention_D = cumsum(intervention_rand == 1),
intervention_L = cumsum(intervention_rand == 2)) %>%
mutate(blockcheck = (control == intervention_D) & (control == intervention_L)) %>%
filter(blockcheck) %>%
rowwise() %>%
mutate(totalrecruit = sum(control, intervention_L, intervention_D)) %>%
mutate(blockno = totalrecruit / 12)
flag_1_LDPVS[i] <- sum(!((1:200) %in% (x$totalrecruit / 12)))
}
flag_1_LDPVS
## Even throughout - block sizes working.
site_no <- unique(rand_list$redcap_data_access_group)
site_no <- site_no[!(site_no %in% site_LDPVS)]
flag_1 <- vector("numeric", length = length(site_no))
for(i in 1:length(site_no)){
x <- rand_list %>%
filter(redcap_data_access_group == site_no[i],
pt_state_rand == 1) %>%
mutate(control = cumsum(intervention_rand == 3),
intervention_D = cumsum(intervention_rand == 1)) %>%
mutate(blockcheck = (control == intervention_D)) %>%
filter(blockcheck) %>%
rowwise() %>%
mutate(totalrecruit = sum(control, intervention_D)) %>%
mutate(blockno = totalrecruit / 12)
flag_1[i] <- sum(!((1:200) %in% (x$totalrecruit / 12)))
}
flag_1
x <- rand_list %>%
filter(redcap_data_access_group %in% site_no,
pt_state_rand == 3)
x
library(tidyverse)
library(dplyr)
setwd("C:/Users/Anna Heath/OneDrive/OneDrive - SickKids/Admin Anna/Hiring and Staff/Ziming Chen 2022/PRACTICAL/SimulationMar20/Multinomial_AH/KJL")
LR_noeffect <- read.csv("LR_noeffect.csv")
LR_imp_both <- read.csv("LR_imp_both.csv")
LR_imp_lib_worse_mort <- read.csv("LR_imp_lib_worse_mort.csv")
LR_imp_mort_worse_lib <- read.csv("LR_imp_mort_worse_lib.csv")
LR_worsen_both <- read.csv("LR_worsen_both.csv")
LR_imp_lib_no_mort <- read.csv("LR_imp_lib_no_mort.csv")
LR_imp_mort_no_lib <- read.csv("LR_imp_mort_no_lib.csv")
#-------calculating lambda that controls type one error----------
LR_noeffect <- LR_noeffect %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(LR_noeffect) %>%
filter(V1 != "Error") %>%
mutate(trt_effect_YN = V1,
p_val = as.numeric(V2),
trt_est = as.numeric(V3),
trt_sd = as.numeric(V4))
(LR_type1_error <- nrow(LR_noeffect[LR_noeffect$trt_effect_YN == "Yes",])/nrow(LR_noeffect))
#--------based on the lambda, calculating "power" for each scenario----------
################## worsening both ################################
LR_worsen_both <- LR_worsen_both %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(LR_worsen_both) %>%
filter(V1 != "Error") %>%
mutate(trt_effect_YN = V1,
p_val = as.numeric(V2),
trt_est = as.numeric(V3),
trt_sd = as.numeric(V4))
(LR_worsen_both_pow <- nrow(LR_worsen_both[LR_worsen_both$trt_effect_YN == "Yes",])/nrow(LR_worsen_both))
################## improving both ################################
LR_imp_both <- LR_imp_both %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(LR_imp_both) %>%
filter(V1 != "Error") %>%
mutate(trt_effect_YN = V1,
p_val = as.numeric(V2),
trt_est = as.numeric(V3),
trt_sd = as.numeric(V4))
(LR_imp_both_pow <- nrow(LR_imp_both[LR_imp_both$trt_effect_YN == "Yes",])/nrow(LR_imp_both))
################## improving liberation worsening mortality ################################
LR_imp_lib_worse_mort <- LR_imp_lib_worse_mort %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(LR_imp_lib_worse_mort) %>%
filter(V1 != "Error") %>%
mutate(trt_effect_YN = V1,
p_val = as.numeric(V2),
trt_est = as.numeric(V3),
trt_sd = as.numeric(V4))
(LR_imp_lib_worse_mort_pow <- nrow(LR_imp_lib_worse_mort[LR_imp_lib_worse_mort$trt_effect_YN == "Yes",])/nrow(LR_imp_lib_worse_mort))
################## improving mortality worsening liberation ################################
LR_imp_mort_worse_lib <- LR_imp_mort_worse_lib %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(LR_imp_mort_worse_lib) %>%
filter(V1 != "Error") %>%
mutate(trt_effect_YN = V1,
p_val = as.numeric(V2),
trt_est = as.numeric(V3),
trt_sd = as.numeric(V4))
(LR_imp_mort_worse_lib_pow <- nrow(LR_imp_mort_worse_lib[LR_imp_mort_worse_lib$trt_effect_YN == "Yes",])/nrow(LR_imp_mort_worse_lib))
################## improving liberation no mortality ################################
LR_imp_lib_no_mort <- LR_imp_lib_no_mort %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(LR_imp_lib_no_mort) %>%
filter(V1 != "Error") %>%
mutate(trt_effect_YN = V1,
p_val = as.numeric(V2),
trt_est = as.numeric(V3),
trt_sd = as.numeric(V4))
(LR_imp_lib_no_mort_pow <- nrow(LR_imp_lib_no_mort[LR_imp_lib_no_mort$trt_effect_YN == "Yes",])/nrow(LR_imp_lib_no_mort))
################## improving mortality no liberation ################################
LR_imp_mort_no_lib <- LR_imp_mort_no_lib %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(LR_imp_mort_no_lib) %>%
filter(V1 != "Error") %>%
mutate(trt_effect_YN = V1,
p_val = as.numeric(V2),
trt_est = as.numeric(V3),
trt_sd = as.numeric(V4))
(LR_imp_mort_no_lib_pow <- nrow(LR_imp_mort_no_lib[LR_imp_mort_no_lib$trt_effect_YN == "Yes",])/nrow(LR_imp_mort_no_lib))
LR_1 <- data.frame(scenario = c("no_eff", "worsen_both", "imp_both", "worsen_mort_imp_lib", "worsen_lib_imp_mort", "imp_lib_no_mort", "imp_mort_no_lib"),
post_p = c(LR_type1_error, LR_worsen_both_pow, LR_imp_both_pow, LR_imp_lib_worse_mort_pow, LR_imp_mort_worse_lib_pow, LR_imp_lib_no_mort_pow, LR_imp_mort_no_lib_pow),
trt_est = c(mean(LR_noeffect$trt_est), mean(LR_worsen_both$trt_est), mean(LR_imp_both$trt_est), mean(LR_imp_lib_worse_mort$trt_est), mean(LR_imp_mort_worse_lib$trt_est), mean(LR_imp_lib_no_mort$trt_est), mean(LR_imp_mort_no_lib$trt_est)),
sd_est = c(mean(LR_noeffect$trt_sd), mean(LR_worsen_both$trt_sd), mean(LR_imp_both$trt_sd), mean(LR_imp_lib_worse_mort$trt_sd), mean(LR_imp_mort_worse_lib$trt_sd), mean(LR_imp_lib_no_mort$trt_sd), mean(LR_imp_mort_no_lib$trt_sd)))
LR_1
library(tidyverse)
library(dplyr)
setwd("C:/Users/Anna Heath/OneDrive/OneDrive - SickKids/Admin Anna/Hiring and Staff/Ziming Chen 2022/PRACTICAL/SimulationMar20/Weibull_AH/KJL")
LR_noeffect <- read.csv("LR_noeffect.csv")
LR_imp_both <- read.csv("LR_imp_both.csv")
LR_imp_lib_worse_mort <- read.csv("LR_imp_lib_worse_mort.csv")
LR_imp_mort_worse_lib <- read.csv("LR_imp_mort_worse_lib.csv")
LR_worsen_both <- read.csv("LR_worsen_both.csv")
LR_imp_lib_no_mort <- read.csv("LR_imp_lib_no_mort.csv")
LR_imp_mort_no_lib <- read.csv("LR_imp_mort_no_lib.csv")
#-------calculating lambda that controls type one error----------
LR_noeffect <- LR_noeffect %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(LR_noeffect) %>%
filter(V1 != "Error") %>%
mutate(trt_effect_YN = V1,
p_val = as.numeric(V2),
trt_est = as.numeric(V3),
trt_sd = as.numeric(V4))
(LR_type1_error <- nrow(LR_noeffect[LR_noeffect$trt_effect_YN == "Yes",])/nrow(LR_noeffect))
#--------based on the lambda, calculating "power" for each scenario----------
################## worsening both ################################
LR_worsen_both <- LR_worsen_both %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(LR_worsen_both) %>%
filter(V1 != "Error") %>%
mutate(trt_effect_YN = V1,
p_val = as.numeric(V2),
trt_est = as.numeric(V3),
trt_sd = as.numeric(V4))
(LR_worsen_both_pow <- nrow(LR_worsen_both[LR_worsen_both$trt_effect_YN == "Yes",])/nrow(LR_worsen_both))
################## improving both ################################
LR_imp_both <- LR_imp_both %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(LR_imp_both) %>%
filter(V1 != "Error") %>%
mutate(trt_effect_YN = V1,
p_val = as.numeric(V2),
trt_est = as.numeric(V3),
trt_sd = as.numeric(V4))
(LR_imp_both_pow <- nrow(LR_imp_both[LR_imp_both$trt_effect_YN == "Yes",])/nrow(LR_imp_both))
################## improving liberation worsening mortality ################################
LR_imp_lib_worse_mort <- LR_imp_lib_worse_mort %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(LR_imp_lib_worse_mort) %>%
filter(V1 != "Error") %>%
mutate(trt_effect_YN = V1,
p_val = as.numeric(V2),
trt_est = as.numeric(V3),
trt_sd = as.numeric(V4))
(LR_imp_lib_worse_mort_pow <- nrow(LR_imp_lib_worse_mort[LR_imp_lib_worse_mort$trt_effect_YN == "Yes",])/nrow(LR_imp_lib_worse_mort))
################## improving mortality worsening liberation ################################
LR_imp_mort_worse_lib <- LR_imp_mort_worse_lib %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(LR_imp_mort_worse_lib) %>%
filter(V1 != "Error") %>%
mutate(trt_effect_YN = V1,
p_val = as.numeric(V2),
trt_est = as.numeric(V3),
trt_sd = as.numeric(V4))
(LR_imp_mort_worse_lib_pow <- nrow(LR_imp_mort_worse_lib[LR_imp_mort_worse_lib$trt_effect_YN == "Yes",])/nrow(LR_imp_mort_worse_lib))
################## improving liberation noning mortality ################################
LR_imp_lib_no_mort <- LR_imp_lib_no_mort %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(LR_imp_lib_no_mort) %>%
filter(V1 != "Error") %>%
mutate(trt_effect_YN = V1,
p_val = as.numeric(V2),
trt_est = as.numeric(V3),
trt_sd = as.numeric(V4))
(LR_imp_lib_no_mort_pow <- nrow(LR_imp_lib_no_mort[LR_imp_lib_no_mort$trt_effect_YN == "Yes",])/nrow(LR_imp_lib_no_mort))
################## improving mortality noning liberation ################################
LR_imp_mort_no_lib <- LR_imp_mort_no_lib %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(LR_imp_mort_no_lib) %>%
filter(V1 != "Error") %>%
mutate(trt_effect_YN = V1,
p_val = as.numeric(V2),
trt_est = as.numeric(V3),
trt_sd = as.numeric(V4))
(LR_imp_mort_no_lib_pow <- nrow(LR_imp_mort_no_lib[LR_imp_mort_no_lib$trt_effect_YN == "Yes",])/nrow(LR_imp_mort_no_lib))
LR_1 <- data.frame(scenario = c("no_eff", "worsen_both", "imp_both", "worsen_mort_imp_lib", "worsen_lib_imp_mort", "imp_lib_no_mort", "imp_mort_no_lib"),
post_p = c(LR_type1_error, LR_worsen_both_pow, LR_imp_both_pow, LR_imp_lib_worse_mort_pow, LR_imp_mort_worse_lib_pow, LR_imp_lib_no_mort_pow, LR_imp_mort_no_lib_pow),
trt_est = c(mean(LR_noeffect$trt_est), mean(LR_worsen_both$trt_est), mean(LR_imp_both$trt_est), mean(LR_imp_lib_worse_mort$trt_est), mean(LR_imp_mort_worse_lib$trt_est), mean(LR_imp_lib_no_mort$trt_est), mean(LR_imp_mort_no_lib$trt_est)),
sd_est = c(mean(LR_noeffect$trt_sd), mean(LR_worsen_both$trt_sd), mean(LR_imp_both$trt_sd), mean(LR_imp_lib_worse_mort$trt_sd), mean(LR_imp_mort_worse_lib$trt_sd), mean(LR_imp_lib_no_mort$trt_sd), mean(LR_imp_mort_no_lib$trt_sd)))
LR_1
LR_noeffect <- read.csv("LR_noeffect.csv")
LR_noeffect
LR_noeffect <- LR_noeffect %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(LR_noeffect) %>%
filter(V1 != "Error") %>%
mutate(trt_effect_YN = V1,
p_val = as.numeric(V2),
trt_est = as.numeric(V3),
trt_sd = as.numeric(V4))  %>%
mutate(p_val = p_val / 2,
trt_effect_YN = p_val <= 0.05)
(LR_type1_error <- nrow(LR_noeffect[LR_noeffect$trt_effect_YN == "Yes",])/nrow(LR_noeffect))
(LR_type1_error <- nrow(LR_noeffect[LR_noeffect$trt_effect_YN,])/nrow(LR_noeffect))
library(tidyverse)
library(dplyr)
setwd("C:/Users/Anna Heath/OneDrive/OneDrive - SickKids/Admin Anna/Hiring and Staff/Ziming Chen 2022/PRACTICAL/SimulationMar20/Weibull_AH/KJL")
LR_noeffect <- read.csv("LR_noeffect.csv")
LR_imp_both <- read.csv("LR_imp_both.csv")
LR_imp_lib_worse_mort <- read.csv("LR_imp_lib_worse_mort.csv")
LR_imp_mort_worse_lib <- read.csv("LR_imp_mort_worse_lib.csv")
LR_worsen_both <- read.csv("LR_worsen_both.csv")
LR_imp_lib_no_mort <- read.csv("LR_imp_lib_no_mort.csv")
LR_imp_mort_no_lib <- read.csv("LR_imp_mort_no_lib.csv")
#-------calculating lambda that controls type one error----------
LR_noeffect <- LR_noeffect %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(LR_noeffect) %>%
filter(V1 != "Error") %>%
mutate(trt_effect_YN = V1,
p_val = as.numeric(V2),
trt_est = as.numeric(V3),
trt_sd = as.numeric(V4))
(LR_type1_error <- nrow(LR_noeffect[LR_noeffect$trt_effect_YN == "Yes",])/nrow(LR_noeffect))
#--------based on the lambda, calculating "power" for each scenario----------
################## worsening both ################################
LR_worsen_both <- LR_worsen_both %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(LR_worsen_both) %>%
filter(V1 != "Error") %>%
mutate(trt_effect_YN = V1,
p_val = as.numeric(V2),
trt_est = as.numeric(V3),
trt_sd = as.numeric(V4))
(LR_worsen_both_pow <- nrow(LR_worsen_both[LR_worsen_both$trt_effect_YN == "Yes",])/nrow(LR_worsen_both))
################## improving both ################################
LR_imp_both <- LR_imp_both %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(LR_imp_both) %>%
filter(V1 != "Error") %>%
mutate(trt_effect_YN = V1,
p_val = as.numeric(V2),
trt_est = as.numeric(V3),
trt_sd = as.numeric(V4))
(LR_imp_both_pow <- nrow(LR_imp_both[LR_imp_both$trt_effect_YN == "Yes",])/nrow(LR_imp_both))
################## improving liberation worsening mortality ################################
LR_imp_lib_worse_mort <- LR_imp_lib_worse_mort %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(LR_imp_lib_worse_mort) %>%
filter(V1 != "Error") %>%
mutate(trt_effect_YN = V1,
p_val = as.numeric(V2),
trt_est = as.numeric(V3),
trt_sd = as.numeric(V4))
(LR_imp_lib_worse_mort_pow <- nrow(LR_imp_lib_worse_mort[LR_imp_lib_worse_mort$trt_effect_YN == "Yes",])/nrow(LR_imp_lib_worse_mort))
################## improving mortality worsening liberation ################################
LR_imp_mort_worse_lib <- LR_imp_mort_worse_lib %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(LR_imp_mort_worse_lib) %>%
filter(V1 != "Error") %>%
mutate(trt_effect_YN = V1,
p_val = as.numeric(V2),
trt_est = as.numeric(V3),
trt_sd = as.numeric(V4))
(LR_imp_mort_worse_lib_pow <- nrow(LR_imp_mort_worse_lib[LR_imp_mort_worse_lib$trt_effect_YN == "Yes",])/nrow(LR_imp_mort_worse_lib))
################## improving liberation noning mortality ################################
LR_imp_lib_no_mort <- LR_imp_lib_no_mort %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(LR_imp_lib_no_mort) %>%
filter(V1 != "Error") %>%
mutate(trt_effect_YN = V1,
p_val = as.numeric(V2),
trt_est = as.numeric(V3),
trt_sd = as.numeric(V4))
(LR_imp_lib_no_mort_pow <- nrow(LR_imp_lib_no_mort[LR_imp_lib_no_mort$trt_effect_YN == "Yes",])/nrow(LR_imp_lib_no_mort))
################## improving mortality noning liberation ################################
LR_imp_mort_no_lib <- LR_imp_mort_no_lib %>%
mutate(X = seq(1, 2000, 1)) %>%
na.omit(LR_imp_mort_no_lib) %>%
filter(V1 != "Error") %>%
mutate(trt_effect_YN = V1,
p_val = as.numeric(V2),
trt_est = as.numeric(V3),
trt_sd = as.numeric(V4))
(LR_imp_mort_no_lib_pow <- nrow(LR_imp_mort_no_lib[LR_imp_mort_no_lib$trt_effect_YN == "Yes",])/nrow(LR_imp_mort_no_lib))
LR_1 <- data.frame(scenario = c("no_eff", "worsen_both", "imp_both", "worsen_mort_imp_lib", "worsen_lib_imp_mort", "imp_lib_no_mort", "imp_mort_no_lib"),
post_p = c(LR_type1_error, LR_worsen_both_pow, LR_imp_both_pow, LR_imp_lib_worse_mort_pow, LR_imp_mort_worse_lib_pow, LR_imp_lib_no_mort_pow, LR_imp_mort_no_lib_pow),
trt_est = c(mean(LR_noeffect$trt_est), mean(LR_worsen_both$trt_est), mean(LR_imp_both$trt_est), mean(LR_imp_lib_worse_mort$trt_est), mean(LR_imp_mort_worse_lib$trt_est), mean(LR_imp_lib_no_mort$trt_est), mean(LR_imp_mort_no_lib$trt_est)),
sd_est = c(mean(LR_noeffect$trt_sd), mean(LR_worsen_both$trt_sd), mean(LR_imp_both$trt_sd), mean(LR_imp_lib_worse_mort$trt_sd), mean(LR_imp_mort_worse_lib$trt_sd), mean(LR_imp_lib_no_mort$trt_sd), mean(LR_imp_mort_no_lib$trt_sd)))
LR_1
